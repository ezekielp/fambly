input CreateAgeInput {
  age: Int
  monthsOld: Int
  personId: ID!
}

"""
Autogenerated return type of CreateAge
"""
type CreateAgePayload {
  errors: [Error!]
  person: Person
}

input CreateOrUpdateBirthdateInput {
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  personId: ID!
}

"""
Autogenerated return type of CreateOrUpdateBirthdate
"""
type CreateOrUpdateBirthdatePayload {
  errors: [Error!]
  person: Person
}

input CreateParentChildRelationshipInput {
  childId: ID!
  note: String
  parentId: ID!
  parentType: String
}

"""
Autogenerated return type of CreateParentChildRelationship
"""
type CreateParentChildRelationshipPayload {
  errors: [Error!]
  parentChildRelationship: ParentChild
}

input CreatePersonInput {
  firstName: String!
  lastName: String
  showOnDashboard: Boolean
}

input CreatePersonNoteInput {
  content: String!
  personId: ID!
}

"""
Autogenerated return type of CreatePersonNote
"""
type CreatePersonNotePayload {
  errors: [Error!]
  note: Note
}

"""
Autogenerated return type of CreatePerson
"""
type CreatePersonPayload {
  errors: [Error!]
  person: Person
}

input CreateUserInput {
  email: String!
  password: String!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  errors: [Error!]
  user: User
}

input DeleteAgeInput {
  personId: ID!
}

input DeleteBirthdateInput {
  personId: ID!
}

input DeleteNoteInput {
  noteId: ID!
}

input DeleteParentChildRelationshipInput {
  parentChildId: ID!
}

type Error {
  message: String!
  path: String!
}

input LoginInput {
  email: String!
  password: String!
}

"""
Autogenerated return type of Login
"""
type LoginPayload {
  errors: [Error!]
  user: User
}

type Mutation {
  createAge(input: CreateAgeInput!): CreateAgePayload!
  createOrUpdateBirthdate(input: CreateOrUpdateBirthdateInput!): CreateOrUpdateBirthdatePayload!
  createParentChildRelationship(input: CreateParentChildRelationshipInput!): CreateParentChildRelationshipPayload!
  createPerson(input: CreatePersonInput!): CreatePersonPayload!
  createPersonNote(input: CreatePersonNoteInput!): CreatePersonNotePayload!
  createUser(input: CreateUserInput!): CreateUserPayload!
  deleteAge(input: DeleteAgeInput!): Boolean!
  deleteBirthdate(input: DeleteBirthdateInput!): Boolean!
  deleteNote(input: DeleteNoteInput!): Boolean!
  deleteParentChildRelationship(input: DeleteParentChildRelationshipInput!): Boolean!
  login(input: LoginInput!): LoginPayload!
  logout: Boolean!
  updateAge(input: UpdateAgeInput!): UpdateAgePayload!
  updateNote(input: UpdateNoteInput!): UpdateNotePayload!
  updateParentChildRelationship(input: UpdateParentChildRelationshipInput!): UpdateParentChildRelationshipPayload!
}

type Note {
  content: String!
  id: ID!
}

type ParentChild {
  child: Person!
  id: ID!
  notes: [Note!]
  parent: Person!
  parentType: String
}

type Person {
  age: Int
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  children: [Person!]
  firstName: String!
  id: ID!
  lastName: String
  monthsOld: Int
  notes: [Note!]
  parents: [Person!]
  showOnDashboard: Boolean!
}

type Query {
  personById(personId: String!): Person
  user: User
}

input UpdateAgeInput {
  age: Int
  monthsOld: Int
  personId: ID!
}

"""
Autogenerated return type of UpdateAge
"""
type UpdateAgePayload {
  errors: [Error!]
  person: Person
}

input UpdateNoteInput {
  content: String!
  noteId: ID!
}

"""
Autogenerated return type of UpdateNote
"""
type UpdateNotePayload {
  errors: [Error!]
  note: Note
}

input UpdateParentChildRelationshipInput {
  parentChildId: ID!
  parentType: String
}

"""
Autogenerated return type of UpdateParentChildRelationship
"""
type UpdateParentChildRelationshipPayload {
  errors: [Error!]
  parentChildRelationship: ParentChild
}

type User {
  email: String!
  id: ID!
  people: [Person!]
}