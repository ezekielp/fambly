input CreateAgeInput {
  age: Int
  monthsOld: Int
  personId: ID!
}

"""
Autogenerated return type of CreateAge
"""
type CreateAgePayload {
  errors: [Error!]
  person: Person
}

input CreateBirthdateInput {
  birthDay: Int
  birthMonth: String
  birthYear: Int
  personId: ID!
}

"""
Autogenerated return type of CreateBirthdate
"""
type CreateBirthdatePayload {
  errors: [Error!]
  person: Person
}

input CreateNoteInput {
  content: String!
  personId: ID!
}

"""
Autogenerated return type of CreateNote
"""
type CreateNotePayload {
  errors: [Error!]
  note: Note
}

input CreatePersonInput {
  firstName: String!
  lastName: String
}

"""
Autogenerated return type of CreatePerson
"""
type CreatePersonPayload {
  errors: [Error!]
  person: Person
}

input CreateUserInput {
  email: String!
  password: String!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  errors: [Error!]
  user: User
}

input DeleteNoteInput {
  noteId: ID!
}

type Error {
  message: String!
  path: String!
}

input LoginInput {
  email: String!
  password: String!
}

"""
Autogenerated return type of Login
"""
type LoginPayload {
  errors: [Error!]
  user: User
}

type Mutation {
  createAge(input: CreateAgeInput!): CreateAgePayload!
  createBirthdate(input: CreateBirthdateInput!): CreateBirthdatePayload!
  createNote(input: CreateNoteInput!): CreateNotePayload!
  createPerson(input: CreatePersonInput!): CreatePersonPayload!
  createUser(input: CreateUserInput!): CreateUserPayload!
  deleteNote(input: DeleteNoteInput!): Boolean!
  login(input: LoginInput!): LoginPayload!
  logout: Boolean!
  updateNote(input: UpdateNoteInput!): UpdateNotePayload!
}

type Note {
  content: String!
  id: ID!
}

type Person {
  age: Int
  birthDay: Int
  birthMonth: String
  birthYear: Int
  firstName: String!
  id: ID!
  lastName: String
  monthsOld: Int
  notes: [Note!]
}

type Query {
  personById(personId: String!): Person
  user: User
}

input UpdateNoteInput {
  content: String!
  noteId: ID!
}

"""
Autogenerated return type of UpdateNote
"""
type UpdateNotePayload {
  errors: [Error!]
  note: Note
}

type User {
  email: String!
  id: ID!
  people: [Person!]
}