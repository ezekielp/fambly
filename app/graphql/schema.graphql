type AmorousRelationship {
  current: Boolean!
  endDay: Int
  endMonth: Int
  endYear: Int
  id: ID!
  notes: [Note!]
  partnerOne: Person!
  partnerTwo: Person!
  relationshipType: String
  startDay: Int
  startMonth: Int
  startYear: Int
  weddingDay: Int
  weddingMonth: Int
  weddingYear: Int
}

input AmorousRelationshipInput {
  partnerOneId: String!
  partnerTwoId: String!
}

type Anniversary {
  partnerOneId: ID!
  partnerOneName: String!
  partnerTwoId: ID!
  partnerTwoName: String!
  weddingDay: Int
  weddingMonth: Int
  weddingYear: Int
}

input CreateAgeInput {
  age: Int
  monthsOld: Int
  personId: ID!
}

"""
Autogenerated return type of CreateAge
"""
type CreateAgePayload {
  errors: [Error!]
  person: Person
}

input CreateAmorousRelationshipInput {
  current: Boolean
  endDay: Int
  endMonth: Int
  endYear: Int
  firstName: String
  lastName: String
  note: String
  partnerOneId: ID!
  partnerTwoId: ID
  relationshipType: String
  showOnDashboard: Boolean
  startDay: Int
  startMonth: Int
  startYear: Int
  weddingDay: Int
  weddingMonth: Int
  weddingYear: Int
}

"""
Autogenerated return type of CreateAmorousRelationship
"""
type CreateAmorousRelationshipPayload {
  amorousRelationship: AmorousRelationship
  errors: [Error!]
}

"""
Autogenerated return type of CreateDummyUser
"""
type CreateDummyUserPayload {
  dummyEmail: DummyEmail
  errors: [Error!]
}

input CreateEmailInput {
  emailAddress: String!
  emailType: String
  personId: ID!
}

"""
Autogenerated return type of CreateEmail
"""
type CreateEmailPayload {
  email: Email
  errors: [Error!]
}

input CreateOrUpdateBirthdateInput {
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  personId: ID!
}

"""
Autogenerated return type of CreateOrUpdateBirthdate
"""
type CreateOrUpdateBirthdatePayload {
  errors: [Error!]
  person: Person
}

input CreateOrUpdateGenderInput {
  gender: String!
  personId: ID!
}

"""
Autogenerated return type of CreateOrUpdateGender
"""
type CreateOrUpdateGenderPayload {
  errors: [Error!]
  person: Person
}

input CreateParentChildRelationshipInput {
  childId: ID!
  note: String
  parentId: ID!
  parentType: String
}

"""
Autogenerated return type of CreateParentChildRelationship
"""
type CreateParentChildRelationshipPayload {
  errors: [Error!]
  parentChildRelationship: ParentChild
}

input CreatePersonInput {
  firstName: String!
  lastName: String
  showOnDashboard: Boolean
}

input CreatePersonNoteInput {
  content: String!
  personId: ID!
}

"""
Autogenerated return type of CreatePersonNote
"""
type CreatePersonNotePayload {
  errors: [Error!]
  note: Note
}

"""
Autogenerated return type of CreatePerson
"""
type CreatePersonPayload {
  errors: [Error!]
  person: Person
}

input CreatePersonPlaceInput {
  country: String!
  current: Boolean
  endMonth: Int
  endYear: Int
  note: String
  personId: ID!
  placeType: String
  startMonth: Int
  startYear: Int
  stateOrRegion: String
  street: String
  town: String
  zipCode: String
}

"""
Autogenerated return type of CreatePersonPlace
"""
type CreatePersonPlacePayload {
  errors: [Error!]
  personPlace: PersonPlace
}

input CreatePersonTagInput {
  color: String
  name: String!
  personId: ID!
}

"""
Autogenerated return type of CreatePersonTag
"""
type CreatePersonTagPayload {
  errors: [Error!]
  personTag: PersonTag
}

input CreateSiblingRelationshipInput {
  firstName: String
  lastName: String
  note: String
  showOnDashboard: Boolean
  siblingOneId: ID!
  siblingTwoId: ID
  siblingType: String
}

"""
Autogenerated return type of CreateSiblingRelationship
"""
type CreateSiblingRelationshipPayload {
  errors: [Error!]
  siblingRelationship: SiblingRelationship
}

input CreateTripInput {
  departureCountry: String
  departureDay: Int
  departureMonth: Int
  departureRegion: String
  departureTown: String
  departureYear: Int
  endCountry: String
  endDay: Int
  endMonth: Int
  endRegion: String
  endTown: String
  endYear: Int
  name: String!
  note: String
}

"""
Autogenerated return type of CreateTrip
"""
type CreateTripPayload {
  errors: [Error!]
  trip: Trip
}

input CreateTripPersonInput {
  note: String
  personId: ID!
  tripId: ID!
}

"""
Autogenerated return type of CreateTripPerson
"""
type CreateTripPersonPayload {
  errors: [Error!]
  tripPerson: TripPerson
}

input CreateTripPlaceInput {
  note: String
  placeCountry: String!
  placeName: String!
  placeStateOrRegion: String
  placeStreet: String
  placeTown: String
  placeType: String
  placeZipCode: String
  tripStageId: ID!
  visitDay: Int
  visitMonth: Int
  visitYear: Int
}

"""
Autogenerated return type of CreateTripPlace
"""
type CreateTripPlacePayload {
  errors: [Error!]
  tripPlace: TripPlace
}

input CreateTripStageInput {
  accommodationCountry: String
  accommodationName: String
  accommodationStateOrRegion: String
  accommodationStreet: String
  accommodationTown: String
  accommodationZipCode: String
  endDay: Int
  endMonth: Int
  endYear: Int
  note: String
  placeCountry: String!
  placeName: String
  placeStateOrRegion: String
  placeStreet: String
  placeTown: String
  placeZipCode: String
  startDay: Int
  startMonth: Int
  startYear: Int
  tripId: ID!
}

"""
Autogenerated return type of CreateTripStage
"""
type CreateTripStagePayload {
  errors: [Error!]
  tripStage: TripStage
}

input CreateTripStagePersonInput {
  note: String
  personId: ID!
  tripStageId: ID!
}

"""
Autogenerated return type of CreateTripStagePerson
"""
type CreateTripStagePersonPayload {
  errors: [Error!]
  tripStagePerson: TripStagePerson
}

input CreateUserInput {
  email: String!
  password: String!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  errors: [Error!]
  user: User
}

input CreateWorkPositionInput {
  companyName: String
  country: String
  current: Boolean
  description: String
  endMonth: Int
  endYear: Int
  personId: ID!
  startMonth: Int
  startYear: Int
  stateOrRegion: String
  title: String
  town: String
  workType: String
}

"""
Autogenerated return type of CreateWorkPosition
"""
type CreateWorkPositionPayload {
  errors: [Error!]
  workPosition: WorkPosition
}

input DeleteAgeInput {
  personId: ID!
}

input DeleteAmorousRelationshipInput {
  partnerOneId: ID!
  partnerTwoId: ID!
}

input DeleteBirthdateInput {
  personId: ID!
}

input DeleteEmailInput {
  emailId: ID!
}

input DeleteGenderInput {
  personId: ID!
}

input DeleteNoteInput {
  noteId: ID!
}

input DeleteParentChildRelationshipInput {
  childId: ID!
  parentId: ID!
}

input DeletePersonInput {
  personId: ID!
}

input DeletePersonPlaceInput {
  personPlaceId: ID!
}

input DeletePersonTagInput {
  personId: ID!
  tagId: ID!
}

input DeleteSiblingRelationshipInput {
  siblingOneId: ID!
  siblingTwoId: ID!
}

type DummyEmail {
  email: String!
  id: ID!
  user: User!
}

type Email {
  emailAddress: String!
  emailType: String
  id: ID!
  person: Person!
}

type Error {
  message: String!
  path: String!
}

input LoginInput {
  email: String!
  password: String!
}

"""
Autogenerated return type of Login
"""
type LoginPayload {
  errors: [Error!]
  user: User
}

type Mutation {
  createAge(input: CreateAgeInput!): CreateAgePayload!
  createAmorousRelationship(input: CreateAmorousRelationshipInput!): CreateAmorousRelationshipPayload!
  createDummyUser: CreateDummyUserPayload!
  createEmail(input: CreateEmailInput!): CreateEmailPayload!
  createOrUpdateBirthdate(input: CreateOrUpdateBirthdateInput!): CreateOrUpdateBirthdatePayload!
  createOrUpdateGender(input: CreateOrUpdateGenderInput!): CreateOrUpdateGenderPayload!
  createParentChildRelationship(input: CreateParentChildRelationshipInput!): CreateParentChildRelationshipPayload!
  createPerson(input: CreatePersonInput!): CreatePersonPayload!
  createPersonNote(input: CreatePersonNoteInput!): CreatePersonNotePayload!
  createPersonPlace(input: CreatePersonPlaceInput!): CreatePersonPlacePayload!
  createPersonTag(input: CreatePersonTagInput!): CreatePersonTagPayload!
  createSiblingRelationship(input: CreateSiblingRelationshipInput!): CreateSiblingRelationshipPayload!
  createTrip(input: CreateTripInput!): CreateTripPayload!
  createTripPerson(input: CreateTripPersonInput!): CreateTripPersonPayload!
  createTripPlace(input: CreateTripPlaceInput!): CreateTripPlacePayload!
  createTripStage(input: CreateTripStageInput!): CreateTripStagePayload!
  createTripStagePerson(input: CreateTripStagePersonInput!): CreateTripStagePersonPayload!
  createUser(input: CreateUserInput!): CreateUserPayload!
  createWorkPosition(input: CreateWorkPositionInput!): CreateWorkPositionPayload!
  deleteAge(input: DeleteAgeInput!): Boolean!
  deleteAmorousRelationship(input: DeleteAmorousRelationshipInput!): Boolean!
  deleteBirthdate(input: DeleteBirthdateInput!): Boolean!
  deleteEmail(input: DeleteEmailInput!): Boolean!
  deleteGender(input: DeleteGenderInput!): Boolean!
  deleteNote(input: DeleteNoteInput!): Boolean!
  deleteParentChildRelationship(input: DeleteParentChildRelationshipInput!): Boolean!
  deletePerson(input: DeletePersonInput!): Boolean!
  deletePersonPlace(input: DeletePersonPlaceInput!): Boolean!
  deletePersonTag(input: DeletePersonTagInput!): Boolean!
  deleteSiblingRelationship(input: DeleteSiblingRelationshipInput!): Boolean!
  login(input: LoginInput!): LoginPayload!
  logout: Boolean!
  updateAge(input: UpdateAgeInput!): UpdateAgePayload!
  updateAmorousRelationship(input: UpdateAmorousRelationshipInput!): UpdateAmorousRelationshipPayload!
  updateEmail(input: UpdateEmailInput!): UpdateEmailPayload!
  updateNote(input: UpdateNoteInput!): UpdateNotePayload!
  updateParentChildRelationship(input: UpdateParentChildRelationshipInput!): UpdateParentChildRelationshipPayload!
  updatePerson(input: UpdatePersonInput!): UpdatePersonPayload!
  updatePersonPlace(input: UpdatePersonPlaceInput!): UpdatePersonPlacePayload!
  updateSiblingRelationship(input: UpdateSiblingRelationshipInput!): UpdateSiblingRelationshipPayload!
  updateTag(input: UpdateTagInput!): UpdateTagPayload!
}

type Note {
  content: String!
  id: ID!
}

type ParentChild {
  child: Person!
  id: ID!
  notes: [Note!]
  parent: Person!
  parentType: String
}

input ParentChildInput {
  childId: String!
  parentId: String!
}

type Person {
  age: Int
  anniversary: Anniversary
  birthDay: Int
  birthMonth: Int
  birthYear: Int
  children: [Person!]
  emails: [Email!]
  firstName: String!
  gender: String
  id: ID!
  lastName: String
  middleName: String
  monthsOld: Int
  notes: [Note!]
  parents: [Person!]
  partners: [Person!]
  personPlaces: [PersonPlace!]
  showOnDashboard: Boolean!
  siblings: [Person!]
  tags: [Tag!]
  workPositions: [WorkPosition!]
}

type PersonPlace {
  current: Boolean
  endMonth: Int
  endYear: Int
  id: ID!
  notes: [Note!]
  person: Person!
  place: Place!
  placeType: String
  startMonth: Int
  startYear: Int
}

type PersonTag {
  id: ID!
  person: Person!
  tag: Tag!
}

type Place {
  country: String!
  id: ID!
  name: String
  stateOrRegion: String
  street: String
  town: String
  zipCode: String
}

type Query {
  amorousRelationshipByPartnerIds(input: AmorousRelationshipInput!): AmorousRelationship
  parentChildRelationshipByParentIdAndChildId(input: ParentChildInput!): ParentChild
  people: [Person!]
  personById(personId: String!): Person
  siblingRelationshipBySiblingIds(input: SiblingRelationshipInput!): SiblingRelationship
  tripById(tripId: String!): Trip
  user: User
  userTagsByUserId(userId: String!): [Tag!]
}

type SiblingRelationship {
  id: ID!
  notes: [Note!]
  siblingOne: Person!
  siblingTwo: Person!
  siblingType: String
}

input SiblingRelationshipInput {
  siblingOneId: String!
  siblingTwoId: String!
}

type Tag {
  color: String
  id: ID!
  name: String!
  people: [Person!]
  user: User!
}

type Trip {
  departureDay: Int
  departureMonth: Int
  departurePoint: Place
  departureYear: Int
  endDay: Int
  endMonth: Int
  endPoint: Place
  endYear: Int
  id: ID!
  name: String!
  notes: [Note!]
  people: [Person!]
  tripStages: [TripStage!]
}

type TripPerson {
  id: ID!
  person: Person!
  trip: Trip!
}

type TripPlace {
  id: ID!
  notes: [Note!]
  place: Place!
  placeType: String
  tripStage: TripStage!
  visitDay: Int
  visitMonth: Int
  visitYear: Int
}

type TripStage {
  accommodation: Place
  endDay: Int
  endMonth: Int
  endYear: Int
  id: ID!
  notes: [Note!]
  people: [Person!]
  place: Place!
  startDay: Int
  startMonth: Int
  startYear: Int
  trip: Trip!
  tripPlaces: [TripPlace!]
}

type TripStagePerson {
  id: ID!
  person: Person!
  tripStage: TripStage!
}

input UpdateAgeInput {
  age: Int
  monthsOld: Int
  personId: ID!
}

"""
Autogenerated return type of UpdateAge
"""
type UpdateAgePayload {
  errors: [Error!]
  person: Person
}

input UpdateAmorousRelationshipInput {
  current: Boolean
  endDay: Int
  endMonth: Int
  endYear: Int
  partnerOneId: ID!
  partnerTwoId: ID!
  relationshipType: String
  startDay: Int
  startMonth: Int
  startYear: Int
  weddingDay: Int
  weddingMonth: Int
  weddingYear: Int
}

"""
Autogenerated return type of UpdateAmorousRelationship
"""
type UpdateAmorousRelationshipPayload {
  amorousRelationship: AmorousRelationship
  errors: [Error!]
}

input UpdateEmailInput {
  emailAddress: String
  emailId: ID!
  emailType: String
}

"""
Autogenerated return type of UpdateEmail
"""
type UpdateEmailPayload {
  email: Email
  errors: [Error!]
}

input UpdateNoteInput {
  content: String!
  noteId: ID!
}

"""
Autogenerated return type of UpdateNote
"""
type UpdateNotePayload {
  errors: [Error!]
  note: Note
}

input UpdateParentChildRelationshipInput {
  childId: ID!
  parentId: ID!
  parentType: String
}

"""
Autogenerated return type of UpdateParentChildRelationship
"""
type UpdateParentChildRelationshipPayload {
  errors: [Error!]
  parentChildRelationship: ParentChild
}

input UpdatePersonInput {
  firstName: String
  lastName: String
  middleName: String
  personId: ID!
}

"""
Autogenerated return type of UpdatePerson
"""
type UpdatePersonPayload {
  errors: [Error!]
  person: Person
}

input UpdatePersonPlaceInput {
  country: String!
  current: Boolean
  endMonth: Int
  endYear: Int
  personPlaceId: ID!
  placeType: String
  startMonth: Int
  startYear: Int
  stateOrRegion: String
  street: String
  town: String
  zipCode: String
}

"""
Autogenerated return type of UpdatePersonPlace
"""
type UpdatePersonPlacePayload {
  errors: [Error!]
  personPlace: PersonPlace
}

input UpdateSiblingRelationshipInput {
  siblingOneId: ID!
  siblingTwoId: ID!
  siblingType: String
}

"""
Autogenerated return type of UpdateSiblingRelationship
"""
type UpdateSiblingRelationshipPayload {
  errors: [Error!]
  siblingRelationship: SiblingRelationship
}

input UpdateTagInput {
  color: String
  name: String
  tagId: ID!
}

"""
Autogenerated return type of UpdateTag
"""
type UpdateTagPayload {
  errors: [Error!]
  tag: Tag
}

type User {
  dummyEmail: DummyEmail
  email: String!
  id: ID!
  people: [Person!]
  tags: [Tag!]
  trips: [Trip!]
}

type WorkPosition {
  companyName: String
  current: Boolean
  description: String
  endMonth: Int
  endYear: Int
  id: ID!
  notes: [Note!]
  person: Person!
  place: Place
  startMonth: Int
  startYear: Int
  title: String
  workType: String
}