input CreateNoteInput {
  content: String!
  personId: ID!
}

"""
Autogenerated return type of CreateNote
"""
type CreateNotePayload {
  errors: [Error!]
  note: Note
}

input CreatePersonInput {
  firstName: String!
  lastName: String
}

"""
Autogenerated return type of CreatePerson
"""
type CreatePersonPayload {
  errors: [Error!]
  person: Person
}

input CreateUserInput {
  email: String!
  password: String!
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  errors: [Error!]
  user: User
}

type Error {
  message: String!
  path: String!
}

input LoginInput {
  email: String!
  password: String!
}

"""
Autogenerated return type of Login
"""
type LoginPayload {
  errors: [Error!]
  user: User
}

type Mutation {
  createNote(input: CreateNoteInput!): CreateNotePayload!
  createPerson(input: CreatePersonInput!): CreatePersonPayload!
  createUser(input: CreateUserInput!): CreateUserPayload!
  login(input: LoginInput!): LoginPayload!
  logout: Boolean!
}

type Note {
  content: String!
  id: ID!
}

type Person {
  firstName: String!
  id: ID!
  lastName: String
  notes: [Note!]
}

type Query {
  user: User
}

type User {
  email: String!
  id: ID!
  people: [Person!]
}