import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type CreateAgeInput = {
  age?: Maybe<Scalars['Int']>;
  monthsOld?: Maybe<Scalars['Int']>;
  personId: Scalars['ID'];
};

/** Autogenerated return type of CreateAge */
export type CreateAgePayload = {
  __typename?: 'CreateAgePayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

export type CreateNoteInput = {
  content: Scalars['String'];
  personId: Scalars['ID'];
};

/** Autogenerated return type of CreateNote */
export type CreateNotePayload = {
  __typename?: 'CreateNotePayload';
  errors?: Maybe<Array<Error>>;
  note?: Maybe<Note>;
};

export type CreateOrUpdateBirthdateInput = {
  birthDay?: Maybe<Scalars['Int']>;
  birthMonth?: Maybe<Scalars['Int']>;
  birthYear?: Maybe<Scalars['Int']>;
  personId: Scalars['ID'];
};

/** Autogenerated return type of CreateOrUpdateBirthdate */
export type CreateOrUpdateBirthdatePayload = {
  __typename?: 'CreateOrUpdateBirthdatePayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

export type CreateParentChildRelationshipInput = {
  childId: Scalars['ID'];
  note?: Maybe<Scalars['String']>;
  parentId: Scalars['ID'];
  parentType?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateParentChildRelationship */
export type CreateParentChildRelationshipPayload = {
  __typename?: 'CreateParentChildRelationshipPayload';
  errors?: Maybe<Array<Error>>;
  parentChildRelationship?: Maybe<ParentChild>;
};

export type CreatePersonInput = {
  firstName: Scalars['String'];
  lastName?: Maybe<Scalars['String']>;
  showOnDashboard?: Maybe<Scalars['Boolean']>;
};

/** Autogenerated return type of CreatePerson */
export type CreatePersonPayload = {
  __typename?: 'CreatePersonPayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

export type CreateUserInput = {
  email: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<User>;
};

export type DeleteNoteInput = {
  noteId: Scalars['ID'];
};

export type Error = {
  __typename?: 'Error';
  message: Scalars['String'];
  path: Scalars['String'];
};

export type LoginInput = {
  email: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated return type of Login */
export type LoginPayload = {
  __typename?: 'LoginPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<User>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createAge: CreateAgePayload;
  createNote: CreateNotePayload;
  createOrUpdateBirthdate: CreateOrUpdateBirthdatePayload;
  createParentChildRelationship: CreateParentChildRelationshipPayload;
  createPerson: CreatePersonPayload;
  createUser: CreateUserPayload;
  deleteNote: Scalars['Boolean'];
  login: LoginPayload;
  logout: Scalars['Boolean'];
  updateAge: UpdateAgePayload;
  updateNote: UpdateNotePayload;
  updateParentChildRelationship: UpdateParentChildRelationshipPayload;
};


export type MutationCreateAgeArgs = {
  input: CreateAgeInput;
};


export type MutationCreateNoteArgs = {
  input: CreateNoteInput;
};


export type MutationCreateOrUpdateBirthdateArgs = {
  input: CreateOrUpdateBirthdateInput;
};


export type MutationCreateParentChildRelationshipArgs = {
  input: CreateParentChildRelationshipInput;
};


export type MutationCreatePersonArgs = {
  input: CreatePersonInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationDeleteNoteArgs = {
  input: DeleteNoteInput;
};


export type MutationLoginArgs = {
  input: LoginInput;
};


export type MutationUpdateAgeArgs = {
  input: UpdateAgeInput;
};


export type MutationUpdateNoteArgs = {
  input: UpdateNoteInput;
};


export type MutationUpdateParentChildRelationshipArgs = {
  input: UpdateParentChildRelationshipInput;
};

export type Note = {
  __typename?: 'Note';
  content: Scalars['String'];
  id: Scalars['ID'];
};

export type ParentChild = {
  __typename?: 'ParentChild';
  child: Person;
  id: Scalars['ID'];
  note?: Maybe<Scalars['String']>;
  parent: Person;
  parentType?: Maybe<Scalars['String']>;
};

export type Person = {
  __typename?: 'Person';
  age?: Maybe<Scalars['Int']>;
  birthDay?: Maybe<Scalars['Int']>;
  birthMonth?: Maybe<Scalars['Int']>;
  birthYear?: Maybe<Scalars['Int']>;
  children?: Maybe<Array<Person>>;
  firstName: Scalars['String'];
  id: Scalars['ID'];
  lastName?: Maybe<Scalars['String']>;
  monthsOld?: Maybe<Scalars['Int']>;
  notes?: Maybe<Array<Note>>;
  parents?: Maybe<Array<Person>>;
  showOnDashboard: Scalars['Boolean'];
};

export type Query = {
  __typename?: 'Query';
  personById?: Maybe<Person>;
  user?: Maybe<User>;
};


export type QueryPersonByIdArgs = {
  personId: Scalars['String'];
};

export type UpdateAgeInput = {
  age?: Maybe<Scalars['Int']>;
  monthsOld?: Maybe<Scalars['Int']>;
  personId: Scalars['ID'];
};

/** Autogenerated return type of UpdateAge */
export type UpdateAgePayload = {
  __typename?: 'UpdateAgePayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

export type UpdateNoteInput = {
  content: Scalars['String'];
  noteId: Scalars['ID'];
};

/** Autogenerated return type of UpdateNote */
export type UpdateNotePayload = {
  __typename?: 'UpdateNotePayload';
  errors?: Maybe<Array<Error>>;
  note?: Maybe<Note>;
};

export type UpdateParentChildRelationshipInput = {
  note?: Maybe<Scalars['String']>;
  parentChildId: Scalars['ID'];
  parentType?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateParentChildRelationship */
export type UpdateParentChildRelationshipPayload = {
  __typename?: 'UpdateParentChildRelationshipPayload';
  errors?: Maybe<Array<Error>>;
  parentChildRelationship?: Maybe<ParentChild>;
};

export type User = {
  __typename?: 'User';
  email: Scalars['String'];
  id: Scalars['ID'];
  people?: Maybe<Array<Person>>;
};

export type GetUserQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUserQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'email'>
  )> }
);

export type LogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type LogoutMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'logout'>
);

export type GetUserForHomeContainerQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUserForHomeContainerQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id'>
    & { people?: Maybe<Array<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'firstName' | 'lastName' | 'showOnDashboard'>
    )>> }
  )> }
);

export type CreatePersonMutationVariables = Exact<{
  input: CreatePersonInput;
}>;


export type CreatePersonMutation = (
  { __typename?: 'Mutation' }
  & { createPerson: (
    { __typename?: 'CreatePersonPayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'firstName' | 'lastName'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type LoginMutationVariables = Exact<{
  input: LoginInput;
}>;


export type LoginMutation = (
  { __typename?: 'Mutation' }
  & { login: (
    { __typename?: 'LoginPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'email'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type CreateUserMutationVariables = Exact<{
  input: CreateUserInput;
}>;


export type CreateUserMutation = (
  { __typename?: 'Mutation' }
  & { createUser: (
    { __typename?: 'CreateUserPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'email'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type GetPersonForPersonContainerQueryVariables = Exact<{
  personId: Scalars['String'];
}>;


export type GetPersonForPersonContainerQuery = (
  { __typename?: 'Query' }
  & { personById?: Maybe<(
    { __typename?: 'Person' }
    & PersonInfoFragment
  )> }
);

export type PersonInfoFragment = (
  { __typename?: 'Person' }
  & Pick<Person, 'id' | 'firstName' | 'lastName' | 'age' | 'monthsOld' | 'birthYear' | 'birthMonth' | 'birthDay'>
  & { notes?: Maybe<Array<(
    { __typename?: 'Note' }
    & Pick<Note, 'id' | 'content'>
  )>> }
);

export type UpdateAgeMutationVariables = Exact<{
  input: UpdateAgeInput;
}>;


export type UpdateAgeMutation = (
  { __typename?: 'Mutation' }
  & { updateAge: (
    { __typename?: 'UpdateAgePayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'age' | 'monthsOld'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type CreateAgeMutationVariables = Exact<{
  input: CreateAgeInput;
}>;


export type CreateAgeMutation = (
  { __typename?: 'Mutation' }
  & { createAge: (
    { __typename?: 'CreateAgePayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'age' | 'monthsOld'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type CreateOrUpdateBirthdateMutationVariables = Exact<{
  input: CreateOrUpdateBirthdateInput;
}>;


export type CreateOrUpdateBirthdateMutation = (
  { __typename?: 'Mutation' }
  & { createOrUpdateBirthdate: (
    { __typename?: 'CreateOrUpdateBirthdatePayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'age' | 'monthsOld' | 'birthYear' | 'birthMonth' | 'birthDay'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type CreateNoteMutationVariables = Exact<{
  input: CreateNoteInput;
}>;


export type CreateNoteMutation = (
  { __typename?: 'Mutation' }
  & { createNote: (
    { __typename?: 'CreateNotePayload' }
    & { note?: Maybe<(
      { __typename?: 'Note' }
      & Pick<Note, 'id' | 'content'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type UpdateNoteMutationVariables = Exact<{
  input: UpdateNoteInput;
}>;


export type UpdateNoteMutation = (
  { __typename?: 'Mutation' }
  & { updateNote: (
    { __typename?: 'UpdateNotePayload' }
    & { note?: Maybe<(
      { __typename?: 'Note' }
      & Pick<Note, 'id' | 'content'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type DeleteNoteMutationVariables = Exact<{
  input: DeleteNoteInput;
}>;


export type DeleteNoteMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteNote'>
);

export type CreateParentChildRelationshipMutationVariables = Exact<{
  input: CreateParentChildRelationshipInput;
}>;


export type CreateParentChildRelationshipMutation = (
  { __typename?: 'Mutation' }
  & { createParentChildRelationship: (
    { __typename?: 'CreateParentChildRelationshipPayload' }
    & { parentChildRelationship?: Maybe<(
      { __typename?: 'ParentChild' }
      & Pick<ParentChild, 'id' | 'parentType' | 'note'>
      & { parent: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ), child: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ) }
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export const PersonInfoFragmentDoc = gql`
    fragment PersonInfo on Person {
  id
  firstName
  lastName
  age
  monthsOld
  birthYear
  birthMonth
  birthDay
  notes {
    id
    content
  }
}
    `;
export const GetUserDocument = gql`
    query GetUser {
  user {
    id
    email
  }
}
    `;

/**
 * __useGetUserQuery__
 *
 * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUserQuery(baseOptions?: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);
      }
export function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);
        }
export type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;
export type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;
export type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;
export const LogoutDocument = gql`
    mutation Logout {
  logout
}
    `;
export type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {
        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);
      }
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;
export type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;
export const GetUserForHomeContainerDocument = gql`
    query GetUserForHomeContainer {
  user {
    id
    people {
      id
      firstName
      lastName
      showOnDashboard
    }
  }
}
    `;

/**
 * __useGetUserForHomeContainerQuery__
 *
 * To run a query within a React component, call `useGetUserForHomeContainerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserForHomeContainerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserForHomeContainerQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUserForHomeContainerQuery(baseOptions?: Apollo.QueryHookOptions<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>) {
        return Apollo.useQuery<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>(GetUserForHomeContainerDocument, baseOptions);
      }
export function useGetUserForHomeContainerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>) {
          return Apollo.useLazyQuery<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>(GetUserForHomeContainerDocument, baseOptions);
        }
export type GetUserForHomeContainerQueryHookResult = ReturnType<typeof useGetUserForHomeContainerQuery>;
export type GetUserForHomeContainerLazyQueryHookResult = ReturnType<typeof useGetUserForHomeContainerLazyQuery>;
export type GetUserForHomeContainerQueryResult = Apollo.QueryResult<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>;
export const CreatePersonDocument = gql`
    mutation CreatePerson($input: CreatePersonInput!) {
  createPerson(input: $input) {
    person {
      id
      firstName
      lastName
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreatePersonMutationFn = Apollo.MutationFunction<CreatePersonMutation, CreatePersonMutationVariables>;

/**
 * __useCreatePersonMutation__
 *
 * To run a mutation, you first call `useCreatePersonMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePersonMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPersonMutation, { data, loading, error }] = useCreatePersonMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePersonMutation(baseOptions?: Apollo.MutationHookOptions<CreatePersonMutation, CreatePersonMutationVariables>) {
        return Apollo.useMutation<CreatePersonMutation, CreatePersonMutationVariables>(CreatePersonDocument, baseOptions);
      }
export type CreatePersonMutationHookResult = ReturnType<typeof useCreatePersonMutation>;
export type CreatePersonMutationResult = Apollo.MutationResult<CreatePersonMutation>;
export type CreatePersonMutationOptions = Apollo.BaseMutationOptions<CreatePersonMutation, CreatePersonMutationVariables>;
export const LoginDocument = gql`
    mutation Login($input: LoginInput!) {
  login(input: $input) {
    user {
      id
      email
    }
    errors {
      path
      message
    }
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const CreateUserDocument = gql`
    mutation CreateUser($input: CreateUserInput!) {
  createUser(input: $input) {
    user {
      id
      email
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {
        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, baseOptions);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;
export const GetPersonForPersonContainerDocument = gql`
    query GetPersonForPersonContainer($personId: String!) {
  personById(personId: $personId) {
    ...PersonInfo
  }
}
    ${PersonInfoFragmentDoc}`;

/**
 * __useGetPersonForPersonContainerQuery__
 *
 * To run a query within a React component, call `useGetPersonForPersonContainerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPersonForPersonContainerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPersonForPersonContainerQuery({
 *   variables: {
 *      personId: // value for 'personId'
 *   },
 * });
 */
export function useGetPersonForPersonContainerQuery(baseOptions?: Apollo.QueryHookOptions<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>) {
        return Apollo.useQuery<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>(GetPersonForPersonContainerDocument, baseOptions);
      }
export function useGetPersonForPersonContainerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>) {
          return Apollo.useLazyQuery<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>(GetPersonForPersonContainerDocument, baseOptions);
        }
export type GetPersonForPersonContainerQueryHookResult = ReturnType<typeof useGetPersonForPersonContainerQuery>;
export type GetPersonForPersonContainerLazyQueryHookResult = ReturnType<typeof useGetPersonForPersonContainerLazyQuery>;
export type GetPersonForPersonContainerQueryResult = Apollo.QueryResult<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>;
export const UpdateAgeDocument = gql`
    mutation UpdateAge($input: UpdateAgeInput!) {
  updateAge(input: $input) {
    person {
      id
      age
      monthsOld
    }
    errors {
      path
      message
    }
  }
}
    `;
export type UpdateAgeMutationFn = Apollo.MutationFunction<UpdateAgeMutation, UpdateAgeMutationVariables>;

/**
 * __useUpdateAgeMutation__
 *
 * To run a mutation, you first call `useUpdateAgeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAgeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAgeMutation, { data, loading, error }] = useUpdateAgeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateAgeMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAgeMutation, UpdateAgeMutationVariables>) {
        return Apollo.useMutation<UpdateAgeMutation, UpdateAgeMutationVariables>(UpdateAgeDocument, baseOptions);
      }
export type UpdateAgeMutationHookResult = ReturnType<typeof useUpdateAgeMutation>;
export type UpdateAgeMutationResult = Apollo.MutationResult<UpdateAgeMutation>;
export type UpdateAgeMutationOptions = Apollo.BaseMutationOptions<UpdateAgeMutation, UpdateAgeMutationVariables>;
export const CreateAgeDocument = gql`
    mutation CreateAge($input: CreateAgeInput!) {
  createAge(input: $input) {
    person {
      id
      age
      monthsOld
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateAgeMutationFn = Apollo.MutationFunction<CreateAgeMutation, CreateAgeMutationVariables>;

/**
 * __useCreateAgeMutation__
 *
 * To run a mutation, you first call `useCreateAgeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAgeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAgeMutation, { data, loading, error }] = useCreateAgeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateAgeMutation(baseOptions?: Apollo.MutationHookOptions<CreateAgeMutation, CreateAgeMutationVariables>) {
        return Apollo.useMutation<CreateAgeMutation, CreateAgeMutationVariables>(CreateAgeDocument, baseOptions);
      }
export type CreateAgeMutationHookResult = ReturnType<typeof useCreateAgeMutation>;
export type CreateAgeMutationResult = Apollo.MutationResult<CreateAgeMutation>;
export type CreateAgeMutationOptions = Apollo.BaseMutationOptions<CreateAgeMutation, CreateAgeMutationVariables>;
export const CreateOrUpdateBirthdateDocument = gql`
    mutation CreateOrUpdateBirthdate($input: CreateOrUpdateBirthdateInput!) {
  createOrUpdateBirthdate(input: $input) {
    person {
      id
      age
      monthsOld
      birthYear
      birthMonth
      birthDay
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateOrUpdateBirthdateMutationFn = Apollo.MutationFunction<CreateOrUpdateBirthdateMutation, CreateOrUpdateBirthdateMutationVariables>;

/**
 * __useCreateOrUpdateBirthdateMutation__
 *
 * To run a mutation, you first call `useCreateOrUpdateBirthdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrUpdateBirthdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrUpdateBirthdateMutation, { data, loading, error }] = useCreateOrUpdateBirthdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrUpdateBirthdateMutation(baseOptions?: Apollo.MutationHookOptions<CreateOrUpdateBirthdateMutation, CreateOrUpdateBirthdateMutationVariables>) {
        return Apollo.useMutation<CreateOrUpdateBirthdateMutation, CreateOrUpdateBirthdateMutationVariables>(CreateOrUpdateBirthdateDocument, baseOptions);
      }
export type CreateOrUpdateBirthdateMutationHookResult = ReturnType<typeof useCreateOrUpdateBirthdateMutation>;
export type CreateOrUpdateBirthdateMutationResult = Apollo.MutationResult<CreateOrUpdateBirthdateMutation>;
export type CreateOrUpdateBirthdateMutationOptions = Apollo.BaseMutationOptions<CreateOrUpdateBirthdateMutation, CreateOrUpdateBirthdateMutationVariables>;
export const CreateNoteDocument = gql`
    mutation CreateNote($input: CreateNoteInput!) {
  createNote(input: $input) {
    note {
      id
      content
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateNoteMutationFn = Apollo.MutationFunction<CreateNoteMutation, CreateNoteMutationVariables>;

/**
 * __useCreateNoteMutation__
 *
 * To run a mutation, you first call `useCreateNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createNoteMutation, { data, loading, error }] = useCreateNoteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateNoteMutation(baseOptions?: Apollo.MutationHookOptions<CreateNoteMutation, CreateNoteMutationVariables>) {
        return Apollo.useMutation<CreateNoteMutation, CreateNoteMutationVariables>(CreateNoteDocument, baseOptions);
      }
export type CreateNoteMutationHookResult = ReturnType<typeof useCreateNoteMutation>;
export type CreateNoteMutationResult = Apollo.MutationResult<CreateNoteMutation>;
export type CreateNoteMutationOptions = Apollo.BaseMutationOptions<CreateNoteMutation, CreateNoteMutationVariables>;
export const UpdateNoteDocument = gql`
    mutation UpdateNote($input: UpdateNoteInput!) {
  updateNote(input: $input) {
    note {
      id
      content
    }
    errors {
      path
      message
    }
  }
}
    `;
export type UpdateNoteMutationFn = Apollo.MutationFunction<UpdateNoteMutation, UpdateNoteMutationVariables>;

/**
 * __useUpdateNoteMutation__
 *
 * To run a mutation, you first call `useUpdateNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNoteMutation, { data, loading, error }] = useUpdateNoteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateNoteMutation(baseOptions?: Apollo.MutationHookOptions<UpdateNoteMutation, UpdateNoteMutationVariables>) {
        return Apollo.useMutation<UpdateNoteMutation, UpdateNoteMutationVariables>(UpdateNoteDocument, baseOptions);
      }
export type UpdateNoteMutationHookResult = ReturnType<typeof useUpdateNoteMutation>;
export type UpdateNoteMutationResult = Apollo.MutationResult<UpdateNoteMutation>;
export type UpdateNoteMutationOptions = Apollo.BaseMutationOptions<UpdateNoteMutation, UpdateNoteMutationVariables>;
export const DeleteNoteDocument = gql`
    mutation DeleteNote($input: DeleteNoteInput!) {
  deleteNote(input: $input)
}
    `;
export type DeleteNoteMutationFn = Apollo.MutationFunction<DeleteNoteMutation, DeleteNoteMutationVariables>;

/**
 * __useDeleteNoteMutation__
 *
 * To run a mutation, you first call `useDeleteNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteNoteMutation, { data, loading, error }] = useDeleteNoteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteNoteMutation(baseOptions?: Apollo.MutationHookOptions<DeleteNoteMutation, DeleteNoteMutationVariables>) {
        return Apollo.useMutation<DeleteNoteMutation, DeleteNoteMutationVariables>(DeleteNoteDocument, baseOptions);
      }
export type DeleteNoteMutationHookResult = ReturnType<typeof useDeleteNoteMutation>;
export type DeleteNoteMutationResult = Apollo.MutationResult<DeleteNoteMutation>;
export type DeleteNoteMutationOptions = Apollo.BaseMutationOptions<DeleteNoteMutation, DeleteNoteMutationVariables>;
export const CreateParentChildRelationshipDocument = gql`
    mutation CreateParentChildRelationship($input: CreateParentChildRelationshipInput!) {
  createParentChildRelationship(input: $input) {
    parentChildRelationship {
      id
      parent {
        id
        firstName
        lastName
      }
      child {
        id
        firstName
        lastName
      }
      parentType
      note
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateParentChildRelationshipMutationFn = Apollo.MutationFunction<CreateParentChildRelationshipMutation, CreateParentChildRelationshipMutationVariables>;

/**
 * __useCreateParentChildRelationshipMutation__
 *
 * To run a mutation, you first call `useCreateParentChildRelationshipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateParentChildRelationshipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createParentChildRelationshipMutation, { data, loading, error }] = useCreateParentChildRelationshipMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateParentChildRelationshipMutation(baseOptions?: Apollo.MutationHookOptions<CreateParentChildRelationshipMutation, CreateParentChildRelationshipMutationVariables>) {
        return Apollo.useMutation<CreateParentChildRelationshipMutation, CreateParentChildRelationshipMutationVariables>(CreateParentChildRelationshipDocument, baseOptions);
      }
export type CreateParentChildRelationshipMutationHookResult = ReturnType<typeof useCreateParentChildRelationshipMutation>;
export type CreateParentChildRelationshipMutationResult = Apollo.MutationResult<CreateParentChildRelationshipMutation>;
export type CreateParentChildRelationshipMutationOptions = Apollo.BaseMutationOptions<CreateParentChildRelationshipMutation, CreateParentChildRelationshipMutationVariables>;