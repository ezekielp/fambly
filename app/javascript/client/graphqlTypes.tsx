import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type CreateAgeInput = {
  age?: Maybe<Scalars['Int']>;
  monthsOld?: Maybe<Scalars['Int']>;
  personId: Scalars['ID'];
};

/** Autogenerated return type of CreateAge */
export type CreateAgePayload = {
  __typename?: 'CreateAgePayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

/** Autogenerated return type of CreateDummyUser */
export type CreateDummyUserPayload = {
  __typename?: 'CreateDummyUserPayload';
  dummyEmail?: Maybe<DummyEmail>;
  errors?: Maybe<Array<Error>>;
};

export type CreateOrUpdateBirthdateInput = {
  birthDay?: Maybe<Scalars['Int']>;
  birthMonth?: Maybe<Scalars['Int']>;
  birthYear?: Maybe<Scalars['Int']>;
  personId: Scalars['ID'];
};

/** Autogenerated return type of CreateOrUpdateBirthdate */
export type CreateOrUpdateBirthdatePayload = {
  __typename?: 'CreateOrUpdateBirthdatePayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

export type CreateOrUpdateGenderInput = {
  gender: Scalars['String'];
  personId: Scalars['ID'];
};

/** Autogenerated return type of CreateOrUpdateGender */
export type CreateOrUpdateGenderPayload = {
  __typename?: 'CreateOrUpdateGenderPayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

export type CreateParentChildRelationshipInput = {
  childId: Scalars['ID'];
  note?: Maybe<Scalars['String']>;
  parentId: Scalars['ID'];
  parentType?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateParentChildRelationship */
export type CreateParentChildRelationshipPayload = {
  __typename?: 'CreateParentChildRelationshipPayload';
  errors?: Maybe<Array<Error>>;
  parentChildRelationship?: Maybe<ParentChild>;
};

export type CreatePersonInput = {
  firstName: Scalars['String'];
  lastName?: Maybe<Scalars['String']>;
  showOnDashboard?: Maybe<Scalars['Boolean']>;
};

export type CreatePersonNoteInput = {
  content: Scalars['String'];
  personId: Scalars['ID'];
};

/** Autogenerated return type of CreatePersonNote */
export type CreatePersonNotePayload = {
  __typename?: 'CreatePersonNotePayload';
  errors?: Maybe<Array<Error>>;
  note?: Maybe<Note>;
};

/** Autogenerated return type of CreatePerson */
export type CreatePersonPayload = {
  __typename?: 'CreatePersonPayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

export type CreatePersonPlaceInput = {
  birthPlace?: Maybe<Scalars['Boolean']>;
  country: Scalars['String'];
  current?: Maybe<Scalars['Boolean']>;
  endMonth?: Maybe<Scalars['Int']>;
  endYear?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  personId: Scalars['ID'];
  startMonth?: Maybe<Scalars['Int']>;
  startYear?: Maybe<Scalars['Int']>;
  stateOrRegion?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  town?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreatePersonPlace */
export type CreatePersonPlacePayload = {
  __typename?: 'CreatePersonPlacePayload';
  errors?: Maybe<Array<Error>>;
  personPlace?: Maybe<PersonPlace>;
};

export type CreatePersonTagInput = {
  color?: Maybe<Scalars['String']>;
  name: Scalars['String'];
  personId: Scalars['ID'];
};

/** Autogenerated return type of CreatePersonTag */
export type CreatePersonTagPayload = {
  __typename?: 'CreatePersonTagPayload';
  errors?: Maybe<Array<Error>>;
  personTag?: Maybe<PersonTag>;
};

export type CreateSiblingRelationshipInput = {
  age?: Maybe<Scalars['Int']>;
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  monthsOld?: Maybe<Scalars['Int']>;
  note?: Maybe<Scalars['String']>;
  showOnDashboard?: Maybe<Scalars['Boolean']>;
  siblingOneId: Scalars['ID'];
  siblingTwoId?: Maybe<Scalars['ID']>;
  siblingType?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of CreateSiblingRelationship */
export type CreateSiblingRelationshipPayload = {
  __typename?: 'CreateSiblingRelationshipPayload';
  errors?: Maybe<Array<Error>>;
  siblingRelationship?: Maybe<SiblingRelationship>;
};

export type CreateUserInput = {
  email: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated return type of CreateUser */
export type CreateUserPayload = {
  __typename?: 'CreateUserPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<User>;
};

export type DeleteAgeInput = {
  personId: Scalars['ID'];
};

export type DeleteBirthdateInput = {
  personId: Scalars['ID'];
};

export type DeleteGenderInput = {
  personId: Scalars['ID'];
};

export type DeleteNoteInput = {
  noteId: Scalars['ID'];
};

export type DeleteParentChildRelationshipInput = {
  childId: Scalars['ID'];
  parentId: Scalars['ID'];
};

export type DeletePersonInput = {
  personId: Scalars['ID'];
};

export type DeletePersonPlaceInput = {
  personPlaceId: Scalars['ID'];
};

export type DeletePersonTagInput = {
  personId: Scalars['ID'];
  tagId: Scalars['ID'];
};

export type DeleteSiblingRelationshipInput = {
  siblingOneId: Scalars['ID'];
  siblingTwoId: Scalars['ID'];
};

export type DummyEmail = {
  __typename?: 'DummyEmail';
  email: Scalars['String'];
  id: Scalars['ID'];
  user: User;
};

export type Error = {
  __typename?: 'Error';
  message: Scalars['String'];
  path: Scalars['String'];
};

export type LoginInput = {
  email: Scalars['String'];
  password: Scalars['String'];
};

/** Autogenerated return type of Login */
export type LoginPayload = {
  __typename?: 'LoginPayload';
  errors?: Maybe<Array<Error>>;
  user?: Maybe<User>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createAge: CreateAgePayload;
  createDummyUser: CreateDummyUserPayload;
  createOrUpdateBirthdate: CreateOrUpdateBirthdatePayload;
  createOrUpdateGender: CreateOrUpdateGenderPayload;
  createParentChildRelationship: CreateParentChildRelationshipPayload;
  createPerson: CreatePersonPayload;
  createPersonNote: CreatePersonNotePayload;
  createPersonPlace: CreatePersonPlacePayload;
  createPersonTag: CreatePersonTagPayload;
  createSiblingRelationship: CreateSiblingRelationshipPayload;
  createUser: CreateUserPayload;
  deleteAge: Scalars['Boolean'];
  deleteBirthdate: Scalars['Boolean'];
  deleteGender: Scalars['Boolean'];
  deleteNote: Scalars['Boolean'];
  deleteParentChildRelationship: Scalars['Boolean'];
  deletePerson: Scalars['Boolean'];
  deletePersonPlace: Scalars['Boolean'];
  deletePersonTag: Scalars['Boolean'];
  deleteSiblingRelationship: Scalars['Boolean'];
  login: LoginPayload;
  logout: Scalars['Boolean'];
  updateAge: UpdateAgePayload;
  updateNote: UpdateNotePayload;
  updateParentChildRelationship: UpdateParentChildRelationshipPayload;
  updatePerson: UpdatePersonPayload;
  updatePersonPlace: UpdatePersonPlacePayload;
  updateSiblingRelationship: UpdateSiblingRelationshipPayload;
  updateTag: UpdateTagPayload;
};


export type MutationCreateAgeArgs = {
  input: CreateAgeInput;
};


export type MutationCreateOrUpdateBirthdateArgs = {
  input: CreateOrUpdateBirthdateInput;
};


export type MutationCreateOrUpdateGenderArgs = {
  input: CreateOrUpdateGenderInput;
};


export type MutationCreateParentChildRelationshipArgs = {
  input: CreateParentChildRelationshipInput;
};


export type MutationCreatePersonArgs = {
  input: CreatePersonInput;
};


export type MutationCreatePersonNoteArgs = {
  input: CreatePersonNoteInput;
};


export type MutationCreatePersonPlaceArgs = {
  input: CreatePersonPlaceInput;
};


export type MutationCreatePersonTagArgs = {
  input: CreatePersonTagInput;
};


export type MutationCreateSiblingRelationshipArgs = {
  input: CreateSiblingRelationshipInput;
};


export type MutationCreateUserArgs = {
  input: CreateUserInput;
};


export type MutationDeleteAgeArgs = {
  input: DeleteAgeInput;
};


export type MutationDeleteBirthdateArgs = {
  input: DeleteBirthdateInput;
};


export type MutationDeleteGenderArgs = {
  input: DeleteGenderInput;
};


export type MutationDeleteNoteArgs = {
  input: DeleteNoteInput;
};


export type MutationDeleteParentChildRelationshipArgs = {
  input: DeleteParentChildRelationshipInput;
};


export type MutationDeletePersonArgs = {
  input: DeletePersonInput;
};


export type MutationDeletePersonPlaceArgs = {
  input: DeletePersonPlaceInput;
};


export type MutationDeletePersonTagArgs = {
  input: DeletePersonTagInput;
};


export type MutationDeleteSiblingRelationshipArgs = {
  input: DeleteSiblingRelationshipInput;
};


export type MutationLoginArgs = {
  input: LoginInput;
};


export type MutationUpdateAgeArgs = {
  input: UpdateAgeInput;
};


export type MutationUpdateNoteArgs = {
  input: UpdateNoteInput;
};


export type MutationUpdateParentChildRelationshipArgs = {
  input: UpdateParentChildRelationshipInput;
};


export type MutationUpdatePersonArgs = {
  input: UpdatePersonInput;
};


export type MutationUpdatePersonPlaceArgs = {
  input: UpdatePersonPlaceInput;
};


export type MutationUpdateSiblingRelationshipArgs = {
  input: UpdateSiblingRelationshipInput;
};


export type MutationUpdateTagArgs = {
  input: UpdateTagInput;
};

export type Note = {
  __typename?: 'Note';
  content: Scalars['String'];
  id: Scalars['ID'];
};

export type ParentChild = {
  __typename?: 'ParentChild';
  child: Person;
  id: Scalars['ID'];
  notes?: Maybe<Array<Note>>;
  parent: Person;
  parentType?: Maybe<Scalars['String']>;
};

export type ParentChildInput = {
  childId: Scalars['String'];
  parentId: Scalars['String'];
};

export type Person = {
  __typename?: 'Person';
  age?: Maybe<Scalars['Int']>;
  birthDay?: Maybe<Scalars['Int']>;
  birthMonth?: Maybe<Scalars['Int']>;
  birthYear?: Maybe<Scalars['Int']>;
  children?: Maybe<Array<Person>>;
  firstName: Scalars['String'];
  gender?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  monthsOld?: Maybe<Scalars['Int']>;
  notes?: Maybe<Array<Note>>;
  parents?: Maybe<Array<Person>>;
  personPlaces?: Maybe<Array<PersonPlace>>;
  showOnDashboard: Scalars['Boolean'];
  siblings?: Maybe<Array<Person>>;
  tags?: Maybe<Array<Tag>>;
};

export type PersonPlace = {
  __typename?: 'PersonPlace';
  birthPlace?: Maybe<Scalars['Boolean']>;
  current?: Maybe<Scalars['Boolean']>;
  endMonth?: Maybe<Scalars['Int']>;
  endYear?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  notes?: Maybe<Array<Note>>;
  person: Person;
  place: Place;
  startMonth?: Maybe<Scalars['Int']>;
  startYear?: Maybe<Scalars['Int']>;
};

export type PersonTag = {
  __typename?: 'PersonTag';
  id: Scalars['ID'];
  person: Person;
  tag: Tag;
};

export type Place = {
  __typename?: 'Place';
  country: Scalars['String'];
  id: Scalars['ID'];
  stateOrRegion?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  town?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
};

export type Query = {
  __typename?: 'Query';
  parentChildRelationshipByParentIdAndChildId?: Maybe<ParentChild>;
  people?: Maybe<Array<Person>>;
  personById?: Maybe<Person>;
  siblingRelationshipBySiblingIds?: Maybe<SiblingRelationship>;
  user?: Maybe<User>;
  userTagsByUserId?: Maybe<Array<Tag>>;
};


export type QueryParentChildRelationshipByParentIdAndChildIdArgs = {
  input: ParentChildInput;
};


export type QueryPersonByIdArgs = {
  personId: Scalars['String'];
};


export type QuerySiblingRelationshipBySiblingIdsArgs = {
  input: SiblingRelationshipInput;
};


export type QueryUserTagsByUserIdArgs = {
  userId: Scalars['String'];
};

export type SiblingRelationship = {
  __typename?: 'SiblingRelationship';
  id: Scalars['ID'];
  notes?: Maybe<Array<Note>>;
  siblingOne: Person;
  siblingTwo: Person;
  siblingType?: Maybe<Scalars['String']>;
};

export type SiblingRelationshipInput = {
  siblingOneId: Scalars['String'];
  siblingTwoId: Scalars['String'];
};

export type Tag = {
  __typename?: 'Tag';
  color?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  name: Scalars['String'];
  people?: Maybe<Array<Person>>;
  user: User;
};

export type UpdateAgeInput = {
  age?: Maybe<Scalars['Int']>;
  monthsOld?: Maybe<Scalars['Int']>;
  personId: Scalars['ID'];
};

/** Autogenerated return type of UpdateAge */
export type UpdateAgePayload = {
  __typename?: 'UpdateAgePayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

export type UpdateNoteInput = {
  content: Scalars['String'];
  noteId: Scalars['ID'];
};

/** Autogenerated return type of UpdateNote */
export type UpdateNotePayload = {
  __typename?: 'UpdateNotePayload';
  errors?: Maybe<Array<Error>>;
  note?: Maybe<Note>;
};

export type UpdateParentChildRelationshipInput = {
  childId: Scalars['ID'];
  parentId: Scalars['ID'];
  parentType?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateParentChildRelationship */
export type UpdateParentChildRelationshipPayload = {
  __typename?: 'UpdateParentChildRelationshipPayload';
  errors?: Maybe<Array<Error>>;
  parentChildRelationship?: Maybe<ParentChild>;
};

export type UpdatePersonInput = {
  firstName?: Maybe<Scalars['String']>;
  lastName?: Maybe<Scalars['String']>;
  middleName?: Maybe<Scalars['String']>;
  personId: Scalars['ID'];
};

/** Autogenerated return type of UpdatePerson */
export type UpdatePersonPayload = {
  __typename?: 'UpdatePersonPayload';
  errors?: Maybe<Array<Error>>;
  person?: Maybe<Person>;
};

export type UpdatePersonPlaceInput = {
  birthPlace?: Maybe<Scalars['Boolean']>;
  country: Scalars['String'];
  current?: Maybe<Scalars['Boolean']>;
  endMonth?: Maybe<Scalars['Int']>;
  endYear?: Maybe<Scalars['Int']>;
  personPlaceId: Scalars['ID'];
  startMonth?: Maybe<Scalars['Int']>;
  startYear?: Maybe<Scalars['Int']>;
  stateOrRegion?: Maybe<Scalars['String']>;
  street?: Maybe<Scalars['String']>;
  town?: Maybe<Scalars['String']>;
  zipCode?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdatePersonPlace */
export type UpdatePersonPlacePayload = {
  __typename?: 'UpdatePersonPlacePayload';
  errors?: Maybe<Array<Error>>;
  personPlace?: Maybe<PersonPlace>;
};

export type UpdateSiblingRelationshipInput = {
  siblingOneId: Scalars['ID'];
  siblingTwoId: Scalars['ID'];
  siblingType?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateSiblingRelationship */
export type UpdateSiblingRelationshipPayload = {
  __typename?: 'UpdateSiblingRelationshipPayload';
  errors?: Maybe<Array<Error>>;
  siblingRelationship?: Maybe<SiblingRelationship>;
};

export type UpdateTagInput = {
  color?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  tagId: Scalars['ID'];
};

/** Autogenerated return type of UpdateTag */
export type UpdateTagPayload = {
  __typename?: 'UpdateTagPayload';
  errors?: Maybe<Array<Error>>;
  tag?: Maybe<Tag>;
};

export type User = {
  __typename?: 'User';
  dummyEmail?: Maybe<DummyEmail>;
  email: Scalars['String'];
  id: Scalars['ID'];
  people?: Maybe<Array<Person>>;
  tags?: Maybe<Array<Tag>>;
};

export type GetUserQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUserQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'email'>
    & { dummyEmail?: Maybe<(
      { __typename?: 'DummyEmail' }
      & Pick<DummyEmail, 'id' | 'email'>
    )> }
  )> }
);

export type LogoutMutationVariables = Exact<{ [key: string]: never; }>;


export type LogoutMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'logout'>
);

export type GetUserForHomeContainerQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUserForHomeContainerQuery = (
  { __typename?: 'Query' }
  & { user?: Maybe<(
    { __typename?: 'User' }
    & Pick<User, 'id' | 'email'>
    & { people?: Maybe<Array<(
      { __typename?: 'Person' }
      & HomeContainerPersonInfoFragment
    )>>, tags?: Maybe<Array<(
      { __typename?: 'Tag' }
      & Pick<Tag, 'id' | 'name' | 'color'>
    )>>, dummyEmail?: Maybe<(
      { __typename?: 'DummyEmail' }
      & Pick<DummyEmail, 'id' | 'email'>
    )> }
  )> }
);

export type HomeContainerPersonInfoFragment = (
  { __typename?: 'Person' }
  & Pick<Person, 'id' | 'firstName' | 'lastName' | 'showOnDashboard' | 'age' | 'monthsOld'>
  & { tags?: Maybe<Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name' | 'color'>
  )>> }
);

export type CreatePersonMutationVariables = Exact<{
  input: CreatePersonInput;
}>;


export type CreatePersonMutation = (
  { __typename?: 'Mutation' }
  & { createPerson: (
    { __typename?: 'CreatePersonPayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'firstName' | 'lastName'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type CreateDummyUserMutationVariables = Exact<{ [key: string]: never; }>;


export type CreateDummyUserMutation = (
  { __typename?: 'Mutation' }
  & { createDummyUser: (
    { __typename?: 'CreateDummyUserPayload' }
    & { dummyEmail?: Maybe<(
      { __typename?: 'DummyEmail' }
      & Pick<DummyEmail, 'id' | 'email'>
      & { user: (
        { __typename?: 'User' }
        & Pick<User, 'id'>
      ) }
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type LoginMutationVariables = Exact<{
  input: LoginInput;
}>;


export type LoginMutation = (
  { __typename?: 'Mutation' }
  & { login: (
    { __typename?: 'LoginPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'email'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type CreateUserMutationVariables = Exact<{
  input: CreateUserInput;
}>;


export type CreateUserMutation = (
  { __typename?: 'Mutation' }
  & { createUser: (
    { __typename?: 'CreateUserPayload' }
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'email'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type GetPersonForPersonContainerQueryVariables = Exact<{
  personId: Scalars['String'];
}>;


export type GetPersonForPersonContainerQuery = (
  { __typename?: 'Query' }
  & { personById?: Maybe<(
    { __typename?: 'Person' }
    & PersonInfoFragment
  )> }
);

export type PersonInfoFragment = (
  { __typename?: 'Person' }
  & Pick<Person, 'id' | 'firstName' | 'middleName' | 'lastName' | 'gender' | 'age' | 'monthsOld' | 'birthYear' | 'birthMonth' | 'birthDay'>
  & { tags?: Maybe<Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name' | 'color'>
  )>>, notes?: Maybe<Array<(
    { __typename?: 'Note' }
    & Pick<Note, 'id' | 'content'>
  )>>, parents?: Maybe<Array<(
    { __typename?: 'Person' }
    & SubContactInfoFragment
  )>>, children?: Maybe<Array<(
    { __typename?: 'Person' }
    & SubContactInfoFragment
  )>>, siblings?: Maybe<Array<(
    { __typename?: 'Person' }
    & SubContactInfoFragment
  )>>, personPlaces?: Maybe<Array<(
    { __typename?: 'PersonPlace' }
    & PersonPlaceInfoFragment
  )>> }
);

export type SubContactInfoFragment = (
  { __typename?: 'Person' }
  & Pick<Person, 'id' | 'firstName' | 'lastName' | 'age' | 'monthsOld' | 'gender'>
);

export type PersonPlaceInfoFragment = (
  { __typename?: 'PersonPlace' }
  & Pick<PersonPlace, 'id' | 'birthPlace' | 'current' | 'startMonth' | 'startYear' | 'endMonth' | 'endYear'>
  & { place: (
    { __typename?: 'Place' }
    & Pick<Place, 'id' | 'country' | 'stateOrRegion' | 'town' | 'street' | 'zipCode'>
  ), person: (
    { __typename?: 'Person' }
    & Pick<Person, 'id' | 'firstName'>
  ), notes?: Maybe<Array<(
    { __typename?: 'Note' }
    & Pick<Note, 'id' | 'content'>
  )>> }
);

export type DeletePersonMutationVariables = Exact<{
  input: DeletePersonInput;
}>;


export type DeletePersonMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deletePerson'>
);

export type UpdatePersonMutationVariables = Exact<{
  input: UpdatePersonInput;
}>;


export type UpdatePersonMutation = (
  { __typename?: 'Mutation' }
  & { updatePerson: (
    { __typename?: 'UpdatePersonPayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'firstName' | 'middleName' | 'lastName'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type UpdateAgeMutationVariables = Exact<{
  input: UpdateAgeInput;
}>;


export type UpdateAgeMutation = (
  { __typename?: 'Mutation' }
  & { updateAge: (
    { __typename?: 'UpdateAgePayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'age' | 'monthsOld'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type DeleteAgeMutationVariables = Exact<{
  input: DeleteAgeInput;
}>;


export type DeleteAgeMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteAge'>
);

export type CreateAgeMutationVariables = Exact<{
  input: CreateAgeInput;
}>;


export type CreateAgeMutation = (
  { __typename?: 'Mutation' }
  & { createAge: (
    { __typename?: 'CreateAgePayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'age' | 'monthsOld'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type DeleteBirthdateMutationVariables = Exact<{
  input: DeleteBirthdateInput;
}>;


export type DeleteBirthdateMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteBirthdate'>
);

export type CreateOrUpdateBirthdateMutationVariables = Exact<{
  input: CreateOrUpdateBirthdateInput;
}>;


export type CreateOrUpdateBirthdateMutation = (
  { __typename?: 'Mutation' }
  & { createOrUpdateBirthdate: (
    { __typename?: 'CreateOrUpdateBirthdatePayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'age' | 'monthsOld' | 'birthYear' | 'birthMonth' | 'birthDay'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type CreateOrUpdateGenderMutationVariables = Exact<{
  input: CreateOrUpdateGenderInput;
}>;


export type CreateOrUpdateGenderMutation = (
  { __typename?: 'Mutation' }
  & { createOrUpdateGender: (
    { __typename?: 'CreateOrUpdateGenderPayload' }
    & { person?: Maybe<(
      { __typename?: 'Person' }
      & Pick<Person, 'id' | 'gender'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type DeleteGenderMutationVariables = Exact<{
  input: DeleteGenderInput;
}>;


export type DeleteGenderMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteGender'>
);

export type CreatePersonNoteMutationVariables = Exact<{
  input: CreatePersonNoteInput;
}>;


export type CreatePersonNoteMutation = (
  { __typename?: 'Mutation' }
  & { createPersonNote: (
    { __typename?: 'CreatePersonNotePayload' }
    & { note?: Maybe<(
      { __typename?: 'Note' }
      & Pick<Note, 'id' | 'content'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type UpdateNoteMutationVariables = Exact<{
  input: UpdateNoteInput;
}>;


export type UpdateNoteMutation = (
  { __typename?: 'Mutation' }
  & { updateNote: (
    { __typename?: 'UpdateNotePayload' }
    & { note?: Maybe<(
      { __typename?: 'Note' }
      & Pick<Note, 'id' | 'content'>
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type DeleteNoteMutationVariables = Exact<{
  input: DeleteNoteInput;
}>;


export type DeleteNoteMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteNote'>
);

export type CreateParentChildRelationshipMutationVariables = Exact<{
  input: CreateParentChildRelationshipInput;
}>;


export type CreateParentChildRelationshipMutation = (
  { __typename?: 'Mutation' }
  & { createParentChildRelationship: (
    { __typename?: 'CreateParentChildRelationshipPayload' }
    & { parentChildRelationship?: Maybe<(
      { __typename?: 'ParentChild' }
      & Pick<ParentChild, 'id' | 'parentType'>
      & { parent: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ), child: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ), notes?: Maybe<Array<(
        { __typename?: 'Note' }
        & Pick<Note, 'id' | 'content'>
      )>> }
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type UpdateParentChildRelationshipMutationVariables = Exact<{
  input: UpdateParentChildRelationshipInput;
}>;


export type UpdateParentChildRelationshipMutation = (
  { __typename?: 'Mutation' }
  & { updateParentChildRelationship: (
    { __typename?: 'UpdateParentChildRelationshipPayload' }
    & { parentChildRelationship?: Maybe<(
      { __typename?: 'ParentChild' }
      & Pick<ParentChild, 'id' | 'parentType'>
      & { parent: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ), child: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ), notes?: Maybe<Array<(
        { __typename?: 'Note' }
        & Pick<Note, 'id' | 'content'>
      )>> }
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type GetUserPeopleQueryVariables = Exact<{ [key: string]: never; }>;


export type GetUserPeopleQuery = (
  { __typename?: 'Query' }
  & { people?: Maybe<Array<(
    { __typename?: 'Person' }
    & UserPersonInfoFragment
  )>> }
);

export type UserPersonInfoFragment = (
  { __typename?: 'Person' }
  & Pick<Person, 'id' | 'firstName' | 'lastName'>
);

export type GetParentChildRelationshipQueryVariables = Exact<{
  input: ParentChildInput;
}>;


export type GetParentChildRelationshipQuery = (
  { __typename?: 'Query' }
  & { parentChildRelationshipByParentIdAndChildId?: Maybe<(
    { __typename?: 'ParentChild' }
    & Pick<ParentChild, 'id' | 'parentType'>
  )> }
);

export type DeleteParentChildRelationshipMutationVariables = Exact<{
  input: DeleteParentChildRelationshipInput;
}>;


export type DeleteParentChildRelationshipMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteParentChildRelationship'>
);

export type CreatePersonPlaceMutationVariables = Exact<{
  input: CreatePersonPlaceInput;
}>;


export type CreatePersonPlaceMutation = (
  { __typename?: 'Mutation' }
  & { createPersonPlace: (
    { __typename?: 'CreatePersonPlacePayload' }
    & { personPlace?: Maybe<(
      { __typename?: 'PersonPlace' }
      & Pick<PersonPlace, 'id' | 'birthPlace' | 'current' | 'startMonth' | 'startYear' | 'endMonth' | 'endYear'>
      & { person: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName'>
      ), place: (
        { __typename?: 'Place' }
        & Pick<Place, 'id' | 'country' | 'stateOrRegion' | 'town' | 'street' | 'zipCode'>
      ), notes?: Maybe<Array<(
        { __typename?: 'Note' }
        & Pick<Note, 'id' | 'content'>
      )>> }
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type UpdatePersonPlaceMutationVariables = Exact<{
  input: UpdatePersonPlaceInput;
}>;


export type UpdatePersonPlaceMutation = (
  { __typename?: 'Mutation' }
  & { updatePersonPlace: (
    { __typename?: 'UpdatePersonPlacePayload' }
    & { personPlace?: Maybe<(
      { __typename?: 'PersonPlace' }
      & Pick<PersonPlace, 'id' | 'birthPlace' | 'current' | 'startMonth' | 'startYear' | 'endMonth' | 'endYear'>
      & { person: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName'>
      ), place: (
        { __typename?: 'Place' }
        & Pick<Place, 'id' | 'country' | 'stateOrRegion' | 'town' | 'street' | 'zipCode'>
      ), notes?: Maybe<Array<(
        { __typename?: 'Note' }
        & Pick<Note, 'id' | 'content'>
      )>> }
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type DeletePersonPlaceMutationVariables = Exact<{
  input: DeletePersonPlaceInput;
}>;


export type DeletePersonPlaceMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deletePersonPlace'>
);

export type CreateSiblingRelationshipMutationVariables = Exact<{
  input: CreateSiblingRelationshipInput;
}>;


export type CreateSiblingRelationshipMutation = (
  { __typename?: 'Mutation' }
  & { createSiblingRelationship: (
    { __typename?: 'CreateSiblingRelationshipPayload' }
    & { siblingRelationship?: Maybe<(
      { __typename?: 'SiblingRelationship' }
      & Pick<SiblingRelationship, 'id' | 'siblingType'>
      & { siblingOne: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ), siblingTwo: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ), notes?: Maybe<Array<(
        { __typename?: 'Note' }
        & Pick<Note, 'id' | 'content'>
      )>> }
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type UpdateSiblingRelationshipMutationVariables = Exact<{
  input: UpdateSiblingRelationshipInput;
}>;


export type UpdateSiblingRelationshipMutation = (
  { __typename?: 'Mutation' }
  & { updateSiblingRelationship: (
    { __typename?: 'UpdateSiblingRelationshipPayload' }
    & { siblingRelationship?: Maybe<(
      { __typename?: 'SiblingRelationship' }
      & Pick<SiblingRelationship, 'id' | 'siblingType'>
      & { siblingOne: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ), siblingTwo: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ), notes?: Maybe<Array<(
        { __typename?: 'Note' }
        & Pick<Note, 'id' | 'content'>
      )>> }
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type GetSiblingRelationshipQueryVariables = Exact<{
  input: SiblingRelationshipInput;
}>;


export type GetSiblingRelationshipQuery = (
  { __typename?: 'Query' }
  & { siblingRelationshipBySiblingIds?: Maybe<(
    { __typename?: 'SiblingRelationship' }
    & Pick<SiblingRelationship, 'id' | 'siblingType'>
  )> }
);

export type DeleteSiblingRelationshipMutationVariables = Exact<{
  input: DeleteSiblingRelationshipInput;
}>;


export type DeleteSiblingRelationshipMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deleteSiblingRelationship'>
);

export type GetUserTagsQueryVariables = Exact<{
  userId: Scalars['String'];
}>;


export type GetUserTagsQuery = (
  { __typename?: 'Query' }
  & { userTagsByUserId?: Maybe<Array<(
    { __typename?: 'Tag' }
    & Pick<Tag, 'id' | 'name' | 'color'>
  )>> }
);

export type CreatePersonTagMutationVariables = Exact<{
  input: CreatePersonTagInput;
}>;


export type CreatePersonTagMutation = (
  { __typename?: 'Mutation' }
  & { createPersonTag: (
    { __typename?: 'CreatePersonTagPayload' }
    & { personTag?: Maybe<(
      { __typename?: 'PersonTag' }
      & Pick<PersonTag, 'id'>
      & { tag: (
        { __typename?: 'Tag' }
        & Pick<Tag, 'id' | 'name' | 'color'>
        & { user: (
          { __typename?: 'User' }
          & Pick<User, 'id'>
        ) }
      ), person: (
        { __typename?: 'Person' }
        & Pick<Person, 'id' | 'firstName' | 'lastName'>
      ) }
    )>, errors?: Maybe<Array<(
      { __typename?: 'Error' }
      & Pick<Error, 'path' | 'message'>
    )>> }
  ) }
);

export type DeletePersonTagMutationVariables = Exact<{
  input: DeletePersonTagInput;
}>;


export type DeletePersonTagMutation = (
  { __typename?: 'Mutation' }
  & Pick<Mutation, 'deletePersonTag'>
);

export const HomeContainerPersonInfoFragmentDoc = gql`
    fragment HomeContainerPersonInfo on Person {
  id
  firstName
  lastName
  showOnDashboard
  age
  monthsOld
  tags {
    id
    name
    color
  }
}
    `;
export const SubContactInfoFragmentDoc = gql`
    fragment SubContactInfo on Person {
  id
  firstName
  lastName
  age
  monthsOld
  gender
}
    `;
export const PersonPlaceInfoFragmentDoc = gql`
    fragment PersonPlaceInfo on PersonPlace {
  id
  place {
    id
    country
    stateOrRegion
    town
    street
    zipCode
  }
  person {
    id
    firstName
  }
  birthPlace
  current
  startMonth
  startYear
  endMonth
  endYear
  notes {
    id
    content
  }
}
    `;
export const PersonInfoFragmentDoc = gql`
    fragment PersonInfo on Person {
  id
  firstName
  middleName
  lastName
  gender
  age
  monthsOld
  birthYear
  birthMonth
  birthDay
  tags {
    id
    name
    color
  }
  notes {
    id
    content
  }
  parents {
    ...SubContactInfo
  }
  children {
    ...SubContactInfo
  }
  siblings {
    ...SubContactInfo
  }
  personPlaces {
    ...PersonPlaceInfo
  }
}
    ${SubContactInfoFragmentDoc}
${PersonPlaceInfoFragmentDoc}`;
export const UserPersonInfoFragmentDoc = gql`
    fragment UserPersonInfo on Person {
  id
  firstName
  lastName
}
    `;
export const GetUserDocument = gql`
    query GetUser {
  user {
    id
    email
    dummyEmail {
      id
      email
    }
  }
}
    `;

/**
 * __useGetUserQuery__
 *
 * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUserQuery(baseOptions?: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);
      }
export function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {
          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, baseOptions);
        }
export type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;
export type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;
export type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;
export const LogoutDocument = gql`
    mutation Logout {
  logout
}
    `;
export type LogoutMutationFn = Apollo.MutationFunction<LogoutMutation, LogoutMutationVariables>;

/**
 * __useLogoutMutation__
 *
 * To run a mutation, you first call `useLogoutMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLogoutMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [logoutMutation, { data, loading, error }] = useLogoutMutation({
 *   variables: {
 *   },
 * });
 */
export function useLogoutMutation(baseOptions?: Apollo.MutationHookOptions<LogoutMutation, LogoutMutationVariables>) {
        return Apollo.useMutation<LogoutMutation, LogoutMutationVariables>(LogoutDocument, baseOptions);
      }
export type LogoutMutationHookResult = ReturnType<typeof useLogoutMutation>;
export type LogoutMutationResult = Apollo.MutationResult<LogoutMutation>;
export type LogoutMutationOptions = Apollo.BaseMutationOptions<LogoutMutation, LogoutMutationVariables>;
export const GetUserForHomeContainerDocument = gql`
    query GetUserForHomeContainer {
  user {
    id
    email
    people {
      ...HomeContainerPersonInfo
    }
    tags {
      id
      name
      color
    }
    dummyEmail {
      id
      email
    }
  }
}
    ${HomeContainerPersonInfoFragmentDoc}`;

/**
 * __useGetUserForHomeContainerQuery__
 *
 * To run a query within a React component, call `useGetUserForHomeContainerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserForHomeContainerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserForHomeContainerQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUserForHomeContainerQuery(baseOptions?: Apollo.QueryHookOptions<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>) {
        return Apollo.useQuery<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>(GetUserForHomeContainerDocument, baseOptions);
      }
export function useGetUserForHomeContainerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>) {
          return Apollo.useLazyQuery<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>(GetUserForHomeContainerDocument, baseOptions);
        }
export type GetUserForHomeContainerQueryHookResult = ReturnType<typeof useGetUserForHomeContainerQuery>;
export type GetUserForHomeContainerLazyQueryHookResult = ReturnType<typeof useGetUserForHomeContainerLazyQuery>;
export type GetUserForHomeContainerQueryResult = Apollo.QueryResult<GetUserForHomeContainerQuery, GetUserForHomeContainerQueryVariables>;
export const CreatePersonDocument = gql`
    mutation CreatePerson($input: CreatePersonInput!) {
  createPerson(input: $input) {
    person {
      id
      firstName
      lastName
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreatePersonMutationFn = Apollo.MutationFunction<CreatePersonMutation, CreatePersonMutationVariables>;

/**
 * __useCreatePersonMutation__
 *
 * To run a mutation, you first call `useCreatePersonMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePersonMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPersonMutation, { data, loading, error }] = useCreatePersonMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePersonMutation(baseOptions?: Apollo.MutationHookOptions<CreatePersonMutation, CreatePersonMutationVariables>) {
        return Apollo.useMutation<CreatePersonMutation, CreatePersonMutationVariables>(CreatePersonDocument, baseOptions);
      }
export type CreatePersonMutationHookResult = ReturnType<typeof useCreatePersonMutation>;
export type CreatePersonMutationResult = Apollo.MutationResult<CreatePersonMutation>;
export type CreatePersonMutationOptions = Apollo.BaseMutationOptions<CreatePersonMutation, CreatePersonMutationVariables>;
export const CreateDummyUserDocument = gql`
    mutation CreateDummyUser {
  createDummyUser {
    dummyEmail {
      id
      email
      user {
        id
      }
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateDummyUserMutationFn = Apollo.MutationFunction<CreateDummyUserMutation, CreateDummyUserMutationVariables>;

/**
 * __useCreateDummyUserMutation__
 *
 * To run a mutation, you first call `useCreateDummyUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateDummyUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createDummyUserMutation, { data, loading, error }] = useCreateDummyUserMutation({
 *   variables: {
 *   },
 * });
 */
export function useCreateDummyUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateDummyUserMutation, CreateDummyUserMutationVariables>) {
        return Apollo.useMutation<CreateDummyUserMutation, CreateDummyUserMutationVariables>(CreateDummyUserDocument, baseOptions);
      }
export type CreateDummyUserMutationHookResult = ReturnType<typeof useCreateDummyUserMutation>;
export type CreateDummyUserMutationResult = Apollo.MutationResult<CreateDummyUserMutation>;
export type CreateDummyUserMutationOptions = Apollo.BaseMutationOptions<CreateDummyUserMutation, CreateDummyUserMutationVariables>;
export const LoginDocument = gql`
    mutation Login($input: LoginInput!) {
  login(input: $input) {
    user {
      id
      email
    }
    errors {
      path
      message
    }
  }
}
    `;
export type LoginMutationFn = Apollo.MutationFunction<LoginMutation, LoginMutationVariables>;

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoginMutation(baseOptions?: Apollo.MutationHookOptions<LoginMutation, LoginMutationVariables>) {
        return Apollo.useMutation<LoginMutation, LoginMutationVariables>(LoginDocument, baseOptions);
      }
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>;
export type LoginMutationOptions = Apollo.BaseMutationOptions<LoginMutation, LoginMutationVariables>;
export const CreateUserDocument = gql`
    mutation CreateUser($input: CreateUserInput!) {
  createUser(input: $input) {
    user {
      id
      email
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateUserMutationFn = Apollo.MutationFunction<CreateUserMutation, CreateUserMutationVariables>;

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateUserMutation(baseOptions?: Apollo.MutationHookOptions<CreateUserMutation, CreateUserMutationVariables>) {
        return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(CreateUserDocument, baseOptions);
      }
export type CreateUserMutationHookResult = ReturnType<typeof useCreateUserMutation>;
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<CreateUserMutation, CreateUserMutationVariables>;
export const GetPersonForPersonContainerDocument = gql`
    query GetPersonForPersonContainer($personId: String!) {
  personById(personId: $personId) {
    ...PersonInfo
  }
}
    ${PersonInfoFragmentDoc}`;

/**
 * __useGetPersonForPersonContainerQuery__
 *
 * To run a query within a React component, call `useGetPersonForPersonContainerQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetPersonForPersonContainerQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetPersonForPersonContainerQuery({
 *   variables: {
 *      personId: // value for 'personId'
 *   },
 * });
 */
export function useGetPersonForPersonContainerQuery(baseOptions?: Apollo.QueryHookOptions<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>) {
        return Apollo.useQuery<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>(GetPersonForPersonContainerDocument, baseOptions);
      }
export function useGetPersonForPersonContainerLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>) {
          return Apollo.useLazyQuery<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>(GetPersonForPersonContainerDocument, baseOptions);
        }
export type GetPersonForPersonContainerQueryHookResult = ReturnType<typeof useGetPersonForPersonContainerQuery>;
export type GetPersonForPersonContainerLazyQueryHookResult = ReturnType<typeof useGetPersonForPersonContainerLazyQuery>;
export type GetPersonForPersonContainerQueryResult = Apollo.QueryResult<GetPersonForPersonContainerQuery, GetPersonForPersonContainerQueryVariables>;
export const DeletePersonDocument = gql`
    mutation DeletePerson($input: DeletePersonInput!) {
  deletePerson(input: $input)
}
    `;
export type DeletePersonMutationFn = Apollo.MutationFunction<DeletePersonMutation, DeletePersonMutationVariables>;

/**
 * __useDeletePersonMutation__
 *
 * To run a mutation, you first call `useDeletePersonMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePersonMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePersonMutation, { data, loading, error }] = useDeletePersonMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeletePersonMutation(baseOptions?: Apollo.MutationHookOptions<DeletePersonMutation, DeletePersonMutationVariables>) {
        return Apollo.useMutation<DeletePersonMutation, DeletePersonMutationVariables>(DeletePersonDocument, baseOptions);
      }
export type DeletePersonMutationHookResult = ReturnType<typeof useDeletePersonMutation>;
export type DeletePersonMutationResult = Apollo.MutationResult<DeletePersonMutation>;
export type DeletePersonMutationOptions = Apollo.BaseMutationOptions<DeletePersonMutation, DeletePersonMutationVariables>;
export const UpdatePersonDocument = gql`
    mutation UpdatePerson($input: UpdatePersonInput!) {
  updatePerson(input: $input) {
    person {
      id
      firstName
      middleName
      lastName
    }
    errors {
      path
      message
    }
  }
}
    `;
export type UpdatePersonMutationFn = Apollo.MutationFunction<UpdatePersonMutation, UpdatePersonMutationVariables>;

/**
 * __useUpdatePersonMutation__
 *
 * To run a mutation, you first call `useUpdatePersonMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePersonMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePersonMutation, { data, loading, error }] = useUpdatePersonMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdatePersonMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePersonMutation, UpdatePersonMutationVariables>) {
        return Apollo.useMutation<UpdatePersonMutation, UpdatePersonMutationVariables>(UpdatePersonDocument, baseOptions);
      }
export type UpdatePersonMutationHookResult = ReturnType<typeof useUpdatePersonMutation>;
export type UpdatePersonMutationResult = Apollo.MutationResult<UpdatePersonMutation>;
export type UpdatePersonMutationOptions = Apollo.BaseMutationOptions<UpdatePersonMutation, UpdatePersonMutationVariables>;
export const UpdateAgeDocument = gql`
    mutation UpdateAge($input: UpdateAgeInput!) {
  updateAge(input: $input) {
    person {
      id
      age
      monthsOld
    }
    errors {
      path
      message
    }
  }
}
    `;
export type UpdateAgeMutationFn = Apollo.MutationFunction<UpdateAgeMutation, UpdateAgeMutationVariables>;

/**
 * __useUpdateAgeMutation__
 *
 * To run a mutation, you first call `useUpdateAgeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateAgeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateAgeMutation, { data, loading, error }] = useUpdateAgeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateAgeMutation(baseOptions?: Apollo.MutationHookOptions<UpdateAgeMutation, UpdateAgeMutationVariables>) {
        return Apollo.useMutation<UpdateAgeMutation, UpdateAgeMutationVariables>(UpdateAgeDocument, baseOptions);
      }
export type UpdateAgeMutationHookResult = ReturnType<typeof useUpdateAgeMutation>;
export type UpdateAgeMutationResult = Apollo.MutationResult<UpdateAgeMutation>;
export type UpdateAgeMutationOptions = Apollo.BaseMutationOptions<UpdateAgeMutation, UpdateAgeMutationVariables>;
export const DeleteAgeDocument = gql`
    mutation DeleteAge($input: DeleteAgeInput!) {
  deleteAge(input: $input)
}
    `;
export type DeleteAgeMutationFn = Apollo.MutationFunction<DeleteAgeMutation, DeleteAgeMutationVariables>;

/**
 * __useDeleteAgeMutation__
 *
 * To run a mutation, you first call `useDeleteAgeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteAgeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteAgeMutation, { data, loading, error }] = useDeleteAgeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteAgeMutation(baseOptions?: Apollo.MutationHookOptions<DeleteAgeMutation, DeleteAgeMutationVariables>) {
        return Apollo.useMutation<DeleteAgeMutation, DeleteAgeMutationVariables>(DeleteAgeDocument, baseOptions);
      }
export type DeleteAgeMutationHookResult = ReturnType<typeof useDeleteAgeMutation>;
export type DeleteAgeMutationResult = Apollo.MutationResult<DeleteAgeMutation>;
export type DeleteAgeMutationOptions = Apollo.BaseMutationOptions<DeleteAgeMutation, DeleteAgeMutationVariables>;
export const CreateAgeDocument = gql`
    mutation CreateAge($input: CreateAgeInput!) {
  createAge(input: $input) {
    person {
      id
      age
      monthsOld
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateAgeMutationFn = Apollo.MutationFunction<CreateAgeMutation, CreateAgeMutationVariables>;

/**
 * __useCreateAgeMutation__
 *
 * To run a mutation, you first call `useCreateAgeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateAgeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createAgeMutation, { data, loading, error }] = useCreateAgeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateAgeMutation(baseOptions?: Apollo.MutationHookOptions<CreateAgeMutation, CreateAgeMutationVariables>) {
        return Apollo.useMutation<CreateAgeMutation, CreateAgeMutationVariables>(CreateAgeDocument, baseOptions);
      }
export type CreateAgeMutationHookResult = ReturnType<typeof useCreateAgeMutation>;
export type CreateAgeMutationResult = Apollo.MutationResult<CreateAgeMutation>;
export type CreateAgeMutationOptions = Apollo.BaseMutationOptions<CreateAgeMutation, CreateAgeMutationVariables>;
export const DeleteBirthdateDocument = gql`
    mutation DeleteBirthdate($input: DeleteBirthdateInput!) {
  deleteBirthdate(input: $input)
}
    `;
export type DeleteBirthdateMutationFn = Apollo.MutationFunction<DeleteBirthdateMutation, DeleteBirthdateMutationVariables>;

/**
 * __useDeleteBirthdateMutation__
 *
 * To run a mutation, you first call `useDeleteBirthdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteBirthdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteBirthdateMutation, { data, loading, error }] = useDeleteBirthdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteBirthdateMutation(baseOptions?: Apollo.MutationHookOptions<DeleteBirthdateMutation, DeleteBirthdateMutationVariables>) {
        return Apollo.useMutation<DeleteBirthdateMutation, DeleteBirthdateMutationVariables>(DeleteBirthdateDocument, baseOptions);
      }
export type DeleteBirthdateMutationHookResult = ReturnType<typeof useDeleteBirthdateMutation>;
export type DeleteBirthdateMutationResult = Apollo.MutationResult<DeleteBirthdateMutation>;
export type DeleteBirthdateMutationOptions = Apollo.BaseMutationOptions<DeleteBirthdateMutation, DeleteBirthdateMutationVariables>;
export const CreateOrUpdateBirthdateDocument = gql`
    mutation CreateOrUpdateBirthdate($input: CreateOrUpdateBirthdateInput!) {
  createOrUpdateBirthdate(input: $input) {
    person {
      id
      age
      monthsOld
      birthYear
      birthMonth
      birthDay
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateOrUpdateBirthdateMutationFn = Apollo.MutationFunction<CreateOrUpdateBirthdateMutation, CreateOrUpdateBirthdateMutationVariables>;

/**
 * __useCreateOrUpdateBirthdateMutation__
 *
 * To run a mutation, you first call `useCreateOrUpdateBirthdateMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrUpdateBirthdateMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrUpdateBirthdateMutation, { data, loading, error }] = useCreateOrUpdateBirthdateMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrUpdateBirthdateMutation(baseOptions?: Apollo.MutationHookOptions<CreateOrUpdateBirthdateMutation, CreateOrUpdateBirthdateMutationVariables>) {
        return Apollo.useMutation<CreateOrUpdateBirthdateMutation, CreateOrUpdateBirthdateMutationVariables>(CreateOrUpdateBirthdateDocument, baseOptions);
      }
export type CreateOrUpdateBirthdateMutationHookResult = ReturnType<typeof useCreateOrUpdateBirthdateMutation>;
export type CreateOrUpdateBirthdateMutationResult = Apollo.MutationResult<CreateOrUpdateBirthdateMutation>;
export type CreateOrUpdateBirthdateMutationOptions = Apollo.BaseMutationOptions<CreateOrUpdateBirthdateMutation, CreateOrUpdateBirthdateMutationVariables>;
export const CreateOrUpdateGenderDocument = gql`
    mutation CreateOrUpdateGender($input: CreateOrUpdateGenderInput!) {
  createOrUpdateGender(input: $input) {
    person {
      id
      gender
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateOrUpdateGenderMutationFn = Apollo.MutationFunction<CreateOrUpdateGenderMutation, CreateOrUpdateGenderMutationVariables>;

/**
 * __useCreateOrUpdateGenderMutation__
 *
 * To run a mutation, you first call `useCreateOrUpdateGenderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateOrUpdateGenderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createOrUpdateGenderMutation, { data, loading, error }] = useCreateOrUpdateGenderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateOrUpdateGenderMutation(baseOptions?: Apollo.MutationHookOptions<CreateOrUpdateGenderMutation, CreateOrUpdateGenderMutationVariables>) {
        return Apollo.useMutation<CreateOrUpdateGenderMutation, CreateOrUpdateGenderMutationVariables>(CreateOrUpdateGenderDocument, baseOptions);
      }
export type CreateOrUpdateGenderMutationHookResult = ReturnType<typeof useCreateOrUpdateGenderMutation>;
export type CreateOrUpdateGenderMutationResult = Apollo.MutationResult<CreateOrUpdateGenderMutation>;
export type CreateOrUpdateGenderMutationOptions = Apollo.BaseMutationOptions<CreateOrUpdateGenderMutation, CreateOrUpdateGenderMutationVariables>;
export const DeleteGenderDocument = gql`
    mutation DeleteGender($input: DeleteGenderInput!) {
  deleteGender(input: $input)
}
    `;
export type DeleteGenderMutationFn = Apollo.MutationFunction<DeleteGenderMutation, DeleteGenderMutationVariables>;

/**
 * __useDeleteGenderMutation__
 *
 * To run a mutation, you first call `useDeleteGenderMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteGenderMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteGenderMutation, { data, loading, error }] = useDeleteGenderMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteGenderMutation(baseOptions?: Apollo.MutationHookOptions<DeleteGenderMutation, DeleteGenderMutationVariables>) {
        return Apollo.useMutation<DeleteGenderMutation, DeleteGenderMutationVariables>(DeleteGenderDocument, baseOptions);
      }
export type DeleteGenderMutationHookResult = ReturnType<typeof useDeleteGenderMutation>;
export type DeleteGenderMutationResult = Apollo.MutationResult<DeleteGenderMutation>;
export type DeleteGenderMutationOptions = Apollo.BaseMutationOptions<DeleteGenderMutation, DeleteGenderMutationVariables>;
export const CreatePersonNoteDocument = gql`
    mutation CreatePersonNote($input: CreatePersonNoteInput!) {
  createPersonNote(input: $input) {
    note {
      id
      content
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreatePersonNoteMutationFn = Apollo.MutationFunction<CreatePersonNoteMutation, CreatePersonNoteMutationVariables>;

/**
 * __useCreatePersonNoteMutation__
 *
 * To run a mutation, you first call `useCreatePersonNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePersonNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPersonNoteMutation, { data, loading, error }] = useCreatePersonNoteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePersonNoteMutation(baseOptions?: Apollo.MutationHookOptions<CreatePersonNoteMutation, CreatePersonNoteMutationVariables>) {
        return Apollo.useMutation<CreatePersonNoteMutation, CreatePersonNoteMutationVariables>(CreatePersonNoteDocument, baseOptions);
      }
export type CreatePersonNoteMutationHookResult = ReturnType<typeof useCreatePersonNoteMutation>;
export type CreatePersonNoteMutationResult = Apollo.MutationResult<CreatePersonNoteMutation>;
export type CreatePersonNoteMutationOptions = Apollo.BaseMutationOptions<CreatePersonNoteMutation, CreatePersonNoteMutationVariables>;
export const UpdateNoteDocument = gql`
    mutation UpdateNote($input: UpdateNoteInput!) {
  updateNote(input: $input) {
    note {
      id
      content
    }
    errors {
      path
      message
    }
  }
}
    `;
export type UpdateNoteMutationFn = Apollo.MutationFunction<UpdateNoteMutation, UpdateNoteMutationVariables>;

/**
 * __useUpdateNoteMutation__
 *
 * To run a mutation, you first call `useUpdateNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateNoteMutation, { data, loading, error }] = useUpdateNoteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateNoteMutation(baseOptions?: Apollo.MutationHookOptions<UpdateNoteMutation, UpdateNoteMutationVariables>) {
        return Apollo.useMutation<UpdateNoteMutation, UpdateNoteMutationVariables>(UpdateNoteDocument, baseOptions);
      }
export type UpdateNoteMutationHookResult = ReturnType<typeof useUpdateNoteMutation>;
export type UpdateNoteMutationResult = Apollo.MutationResult<UpdateNoteMutation>;
export type UpdateNoteMutationOptions = Apollo.BaseMutationOptions<UpdateNoteMutation, UpdateNoteMutationVariables>;
export const DeleteNoteDocument = gql`
    mutation DeleteNote($input: DeleteNoteInput!) {
  deleteNote(input: $input)
}
    `;
export type DeleteNoteMutationFn = Apollo.MutationFunction<DeleteNoteMutation, DeleteNoteMutationVariables>;

/**
 * __useDeleteNoteMutation__
 *
 * To run a mutation, you first call `useDeleteNoteMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteNoteMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteNoteMutation, { data, loading, error }] = useDeleteNoteMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteNoteMutation(baseOptions?: Apollo.MutationHookOptions<DeleteNoteMutation, DeleteNoteMutationVariables>) {
        return Apollo.useMutation<DeleteNoteMutation, DeleteNoteMutationVariables>(DeleteNoteDocument, baseOptions);
      }
export type DeleteNoteMutationHookResult = ReturnType<typeof useDeleteNoteMutation>;
export type DeleteNoteMutationResult = Apollo.MutationResult<DeleteNoteMutation>;
export type DeleteNoteMutationOptions = Apollo.BaseMutationOptions<DeleteNoteMutation, DeleteNoteMutationVariables>;
export const CreateParentChildRelationshipDocument = gql`
    mutation CreateParentChildRelationship($input: CreateParentChildRelationshipInput!) {
  createParentChildRelationship(input: $input) {
    parentChildRelationship {
      id
      parent {
        id
        firstName
        lastName
      }
      child {
        id
        firstName
        lastName
      }
      parentType
      notes {
        id
        content
      }
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateParentChildRelationshipMutationFn = Apollo.MutationFunction<CreateParentChildRelationshipMutation, CreateParentChildRelationshipMutationVariables>;

/**
 * __useCreateParentChildRelationshipMutation__
 *
 * To run a mutation, you first call `useCreateParentChildRelationshipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateParentChildRelationshipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createParentChildRelationshipMutation, { data, loading, error }] = useCreateParentChildRelationshipMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateParentChildRelationshipMutation(baseOptions?: Apollo.MutationHookOptions<CreateParentChildRelationshipMutation, CreateParentChildRelationshipMutationVariables>) {
        return Apollo.useMutation<CreateParentChildRelationshipMutation, CreateParentChildRelationshipMutationVariables>(CreateParentChildRelationshipDocument, baseOptions);
      }
export type CreateParentChildRelationshipMutationHookResult = ReturnType<typeof useCreateParentChildRelationshipMutation>;
export type CreateParentChildRelationshipMutationResult = Apollo.MutationResult<CreateParentChildRelationshipMutation>;
export type CreateParentChildRelationshipMutationOptions = Apollo.BaseMutationOptions<CreateParentChildRelationshipMutation, CreateParentChildRelationshipMutationVariables>;
export const UpdateParentChildRelationshipDocument = gql`
    mutation UpdateParentChildRelationship($input: UpdateParentChildRelationshipInput!) {
  updateParentChildRelationship(input: $input) {
    parentChildRelationship {
      id
      parent {
        id
        firstName
        lastName
      }
      child {
        id
        firstName
        lastName
      }
      parentType
      notes {
        id
        content
      }
    }
    errors {
      path
      message
    }
  }
}
    `;
export type UpdateParentChildRelationshipMutationFn = Apollo.MutationFunction<UpdateParentChildRelationshipMutation, UpdateParentChildRelationshipMutationVariables>;

/**
 * __useUpdateParentChildRelationshipMutation__
 *
 * To run a mutation, you first call `useUpdateParentChildRelationshipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateParentChildRelationshipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateParentChildRelationshipMutation, { data, loading, error }] = useUpdateParentChildRelationshipMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateParentChildRelationshipMutation(baseOptions?: Apollo.MutationHookOptions<UpdateParentChildRelationshipMutation, UpdateParentChildRelationshipMutationVariables>) {
        return Apollo.useMutation<UpdateParentChildRelationshipMutation, UpdateParentChildRelationshipMutationVariables>(UpdateParentChildRelationshipDocument, baseOptions);
      }
export type UpdateParentChildRelationshipMutationHookResult = ReturnType<typeof useUpdateParentChildRelationshipMutation>;
export type UpdateParentChildRelationshipMutationResult = Apollo.MutationResult<UpdateParentChildRelationshipMutation>;
export type UpdateParentChildRelationshipMutationOptions = Apollo.BaseMutationOptions<UpdateParentChildRelationshipMutation, UpdateParentChildRelationshipMutationVariables>;
export const GetUserPeopleDocument = gql`
    query GetUserPeople {
  people {
    ...UserPersonInfo
  }
}
    ${UserPersonInfoFragmentDoc}`;

/**
 * __useGetUserPeopleQuery__
 *
 * To run a query within a React component, call `useGetUserPeopleQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserPeopleQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserPeopleQuery({
 *   variables: {
 *   },
 * });
 */
export function useGetUserPeopleQuery(baseOptions?: Apollo.QueryHookOptions<GetUserPeopleQuery, GetUserPeopleQueryVariables>) {
        return Apollo.useQuery<GetUserPeopleQuery, GetUserPeopleQueryVariables>(GetUserPeopleDocument, baseOptions);
      }
export function useGetUserPeopleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserPeopleQuery, GetUserPeopleQueryVariables>) {
          return Apollo.useLazyQuery<GetUserPeopleQuery, GetUserPeopleQueryVariables>(GetUserPeopleDocument, baseOptions);
        }
export type GetUserPeopleQueryHookResult = ReturnType<typeof useGetUserPeopleQuery>;
export type GetUserPeopleLazyQueryHookResult = ReturnType<typeof useGetUserPeopleLazyQuery>;
export type GetUserPeopleQueryResult = Apollo.QueryResult<GetUserPeopleQuery, GetUserPeopleQueryVariables>;
export const GetParentChildRelationshipDocument = gql`
    query GetParentChildRelationship($input: ParentChildInput!) {
  parentChildRelationshipByParentIdAndChildId(input: $input) {
    id
    parentType
  }
}
    `;

/**
 * __useGetParentChildRelationshipQuery__
 *
 * To run a query within a React component, call `useGetParentChildRelationshipQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetParentChildRelationshipQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetParentChildRelationshipQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetParentChildRelationshipQuery(baseOptions?: Apollo.QueryHookOptions<GetParentChildRelationshipQuery, GetParentChildRelationshipQueryVariables>) {
        return Apollo.useQuery<GetParentChildRelationshipQuery, GetParentChildRelationshipQueryVariables>(GetParentChildRelationshipDocument, baseOptions);
      }
export function useGetParentChildRelationshipLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetParentChildRelationshipQuery, GetParentChildRelationshipQueryVariables>) {
          return Apollo.useLazyQuery<GetParentChildRelationshipQuery, GetParentChildRelationshipQueryVariables>(GetParentChildRelationshipDocument, baseOptions);
        }
export type GetParentChildRelationshipQueryHookResult = ReturnType<typeof useGetParentChildRelationshipQuery>;
export type GetParentChildRelationshipLazyQueryHookResult = ReturnType<typeof useGetParentChildRelationshipLazyQuery>;
export type GetParentChildRelationshipQueryResult = Apollo.QueryResult<GetParentChildRelationshipQuery, GetParentChildRelationshipQueryVariables>;
export const DeleteParentChildRelationshipDocument = gql`
    mutation DeleteParentChildRelationship($input: DeleteParentChildRelationshipInput!) {
  deleteParentChildRelationship(input: $input)
}
    `;
export type DeleteParentChildRelationshipMutationFn = Apollo.MutationFunction<DeleteParentChildRelationshipMutation, DeleteParentChildRelationshipMutationVariables>;

/**
 * __useDeleteParentChildRelationshipMutation__
 *
 * To run a mutation, you first call `useDeleteParentChildRelationshipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteParentChildRelationshipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteParentChildRelationshipMutation, { data, loading, error }] = useDeleteParentChildRelationshipMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteParentChildRelationshipMutation(baseOptions?: Apollo.MutationHookOptions<DeleteParentChildRelationshipMutation, DeleteParentChildRelationshipMutationVariables>) {
        return Apollo.useMutation<DeleteParentChildRelationshipMutation, DeleteParentChildRelationshipMutationVariables>(DeleteParentChildRelationshipDocument, baseOptions);
      }
export type DeleteParentChildRelationshipMutationHookResult = ReturnType<typeof useDeleteParentChildRelationshipMutation>;
export type DeleteParentChildRelationshipMutationResult = Apollo.MutationResult<DeleteParentChildRelationshipMutation>;
export type DeleteParentChildRelationshipMutationOptions = Apollo.BaseMutationOptions<DeleteParentChildRelationshipMutation, DeleteParentChildRelationshipMutationVariables>;
export const CreatePersonPlaceDocument = gql`
    mutation CreatePersonPlace($input: CreatePersonPlaceInput!) {
  createPersonPlace(input: $input) {
    personPlace {
      id
      person {
        id
        firstName
      }
      place {
        id
        country
        stateOrRegion
        town
        street
        zipCode
      }
      birthPlace
      current
      startMonth
      startYear
      endMonth
      endYear
      notes {
        id
        content
      }
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreatePersonPlaceMutationFn = Apollo.MutationFunction<CreatePersonPlaceMutation, CreatePersonPlaceMutationVariables>;

/**
 * __useCreatePersonPlaceMutation__
 *
 * To run a mutation, you first call `useCreatePersonPlaceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePersonPlaceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPersonPlaceMutation, { data, loading, error }] = useCreatePersonPlaceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePersonPlaceMutation(baseOptions?: Apollo.MutationHookOptions<CreatePersonPlaceMutation, CreatePersonPlaceMutationVariables>) {
        return Apollo.useMutation<CreatePersonPlaceMutation, CreatePersonPlaceMutationVariables>(CreatePersonPlaceDocument, baseOptions);
      }
export type CreatePersonPlaceMutationHookResult = ReturnType<typeof useCreatePersonPlaceMutation>;
export type CreatePersonPlaceMutationResult = Apollo.MutationResult<CreatePersonPlaceMutation>;
export type CreatePersonPlaceMutationOptions = Apollo.BaseMutationOptions<CreatePersonPlaceMutation, CreatePersonPlaceMutationVariables>;
export const UpdatePersonPlaceDocument = gql`
    mutation UpdatePersonPlace($input: UpdatePersonPlaceInput!) {
  updatePersonPlace(input: $input) {
    personPlace {
      id
      person {
        id
        firstName
      }
      place {
        id
        country
        stateOrRegion
        town
        street
        zipCode
      }
      birthPlace
      current
      startMonth
      startYear
      endMonth
      endYear
      notes {
        id
        content
      }
    }
    errors {
      path
      message
    }
  }
}
    `;
export type UpdatePersonPlaceMutationFn = Apollo.MutationFunction<UpdatePersonPlaceMutation, UpdatePersonPlaceMutationVariables>;

/**
 * __useUpdatePersonPlaceMutation__
 *
 * To run a mutation, you first call `useUpdatePersonPlaceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdatePersonPlaceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updatePersonPlaceMutation, { data, loading, error }] = useUpdatePersonPlaceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdatePersonPlaceMutation(baseOptions?: Apollo.MutationHookOptions<UpdatePersonPlaceMutation, UpdatePersonPlaceMutationVariables>) {
        return Apollo.useMutation<UpdatePersonPlaceMutation, UpdatePersonPlaceMutationVariables>(UpdatePersonPlaceDocument, baseOptions);
      }
export type UpdatePersonPlaceMutationHookResult = ReturnType<typeof useUpdatePersonPlaceMutation>;
export type UpdatePersonPlaceMutationResult = Apollo.MutationResult<UpdatePersonPlaceMutation>;
export type UpdatePersonPlaceMutationOptions = Apollo.BaseMutationOptions<UpdatePersonPlaceMutation, UpdatePersonPlaceMutationVariables>;
export const DeletePersonPlaceDocument = gql`
    mutation DeletePersonPlace($input: DeletePersonPlaceInput!) {
  deletePersonPlace(input: $input)
}
    `;
export type DeletePersonPlaceMutationFn = Apollo.MutationFunction<DeletePersonPlaceMutation, DeletePersonPlaceMutationVariables>;

/**
 * __useDeletePersonPlaceMutation__
 *
 * To run a mutation, you first call `useDeletePersonPlaceMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePersonPlaceMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePersonPlaceMutation, { data, loading, error }] = useDeletePersonPlaceMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeletePersonPlaceMutation(baseOptions?: Apollo.MutationHookOptions<DeletePersonPlaceMutation, DeletePersonPlaceMutationVariables>) {
        return Apollo.useMutation<DeletePersonPlaceMutation, DeletePersonPlaceMutationVariables>(DeletePersonPlaceDocument, baseOptions);
      }
export type DeletePersonPlaceMutationHookResult = ReturnType<typeof useDeletePersonPlaceMutation>;
export type DeletePersonPlaceMutationResult = Apollo.MutationResult<DeletePersonPlaceMutation>;
export type DeletePersonPlaceMutationOptions = Apollo.BaseMutationOptions<DeletePersonPlaceMutation, DeletePersonPlaceMutationVariables>;
export const CreateSiblingRelationshipDocument = gql`
    mutation CreateSiblingRelationship($input: CreateSiblingRelationshipInput!) {
  createSiblingRelationship(input: $input) {
    siblingRelationship {
      id
      siblingOne {
        id
        firstName
        lastName
      }
      siblingTwo {
        id
        firstName
        lastName
      }
      siblingType
      notes {
        id
        content
      }
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreateSiblingRelationshipMutationFn = Apollo.MutationFunction<CreateSiblingRelationshipMutation, CreateSiblingRelationshipMutationVariables>;

/**
 * __useCreateSiblingRelationshipMutation__
 *
 * To run a mutation, you first call `useCreateSiblingRelationshipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateSiblingRelationshipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createSiblingRelationshipMutation, { data, loading, error }] = useCreateSiblingRelationshipMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateSiblingRelationshipMutation(baseOptions?: Apollo.MutationHookOptions<CreateSiblingRelationshipMutation, CreateSiblingRelationshipMutationVariables>) {
        return Apollo.useMutation<CreateSiblingRelationshipMutation, CreateSiblingRelationshipMutationVariables>(CreateSiblingRelationshipDocument, baseOptions);
      }
export type CreateSiblingRelationshipMutationHookResult = ReturnType<typeof useCreateSiblingRelationshipMutation>;
export type CreateSiblingRelationshipMutationResult = Apollo.MutationResult<CreateSiblingRelationshipMutation>;
export type CreateSiblingRelationshipMutationOptions = Apollo.BaseMutationOptions<CreateSiblingRelationshipMutation, CreateSiblingRelationshipMutationVariables>;
export const UpdateSiblingRelationshipDocument = gql`
    mutation UpdateSiblingRelationship($input: UpdateSiblingRelationshipInput!) {
  updateSiblingRelationship(input: $input) {
    siblingRelationship {
      id
      siblingOne {
        id
        firstName
        lastName
      }
      siblingTwo {
        id
        firstName
        lastName
      }
      siblingType
      notes {
        id
        content
      }
    }
    errors {
      path
      message
    }
  }
}
    `;
export type UpdateSiblingRelationshipMutationFn = Apollo.MutationFunction<UpdateSiblingRelationshipMutation, UpdateSiblingRelationshipMutationVariables>;

/**
 * __useUpdateSiblingRelationshipMutation__
 *
 * To run a mutation, you first call `useUpdateSiblingRelationshipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateSiblingRelationshipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateSiblingRelationshipMutation, { data, loading, error }] = useUpdateSiblingRelationshipMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateSiblingRelationshipMutation(baseOptions?: Apollo.MutationHookOptions<UpdateSiblingRelationshipMutation, UpdateSiblingRelationshipMutationVariables>) {
        return Apollo.useMutation<UpdateSiblingRelationshipMutation, UpdateSiblingRelationshipMutationVariables>(UpdateSiblingRelationshipDocument, baseOptions);
      }
export type UpdateSiblingRelationshipMutationHookResult = ReturnType<typeof useUpdateSiblingRelationshipMutation>;
export type UpdateSiblingRelationshipMutationResult = Apollo.MutationResult<UpdateSiblingRelationshipMutation>;
export type UpdateSiblingRelationshipMutationOptions = Apollo.BaseMutationOptions<UpdateSiblingRelationshipMutation, UpdateSiblingRelationshipMutationVariables>;
export const GetSiblingRelationshipDocument = gql`
    query GetSiblingRelationship($input: SiblingRelationshipInput!) {
  siblingRelationshipBySiblingIds(input: $input) {
    id
    siblingType
  }
}
    `;

/**
 * __useGetSiblingRelationshipQuery__
 *
 * To run a query within a React component, call `useGetSiblingRelationshipQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetSiblingRelationshipQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetSiblingRelationshipQuery({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useGetSiblingRelationshipQuery(baseOptions?: Apollo.QueryHookOptions<GetSiblingRelationshipQuery, GetSiblingRelationshipQueryVariables>) {
        return Apollo.useQuery<GetSiblingRelationshipQuery, GetSiblingRelationshipQueryVariables>(GetSiblingRelationshipDocument, baseOptions);
      }
export function useGetSiblingRelationshipLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSiblingRelationshipQuery, GetSiblingRelationshipQueryVariables>) {
          return Apollo.useLazyQuery<GetSiblingRelationshipQuery, GetSiblingRelationshipQueryVariables>(GetSiblingRelationshipDocument, baseOptions);
        }
export type GetSiblingRelationshipQueryHookResult = ReturnType<typeof useGetSiblingRelationshipQuery>;
export type GetSiblingRelationshipLazyQueryHookResult = ReturnType<typeof useGetSiblingRelationshipLazyQuery>;
export type GetSiblingRelationshipQueryResult = Apollo.QueryResult<GetSiblingRelationshipQuery, GetSiblingRelationshipQueryVariables>;
export const DeleteSiblingRelationshipDocument = gql`
    mutation DeleteSiblingRelationship($input: DeleteSiblingRelationshipInput!) {
  deleteSiblingRelationship(input: $input)
}
    `;
export type DeleteSiblingRelationshipMutationFn = Apollo.MutationFunction<DeleteSiblingRelationshipMutation, DeleteSiblingRelationshipMutationVariables>;

/**
 * __useDeleteSiblingRelationshipMutation__
 *
 * To run a mutation, you first call `useDeleteSiblingRelationshipMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteSiblingRelationshipMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteSiblingRelationshipMutation, { data, loading, error }] = useDeleteSiblingRelationshipMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteSiblingRelationshipMutation(baseOptions?: Apollo.MutationHookOptions<DeleteSiblingRelationshipMutation, DeleteSiblingRelationshipMutationVariables>) {
        return Apollo.useMutation<DeleteSiblingRelationshipMutation, DeleteSiblingRelationshipMutationVariables>(DeleteSiblingRelationshipDocument, baseOptions);
      }
export type DeleteSiblingRelationshipMutationHookResult = ReturnType<typeof useDeleteSiblingRelationshipMutation>;
export type DeleteSiblingRelationshipMutationResult = Apollo.MutationResult<DeleteSiblingRelationshipMutation>;
export type DeleteSiblingRelationshipMutationOptions = Apollo.BaseMutationOptions<DeleteSiblingRelationshipMutation, DeleteSiblingRelationshipMutationVariables>;
export const GetUserTagsDocument = gql`
    query GetUserTags($userId: String!) {
  userTagsByUserId(userId: $userId) {
    id
    name
    color
  }
}
    `;

/**
 * __useGetUserTagsQuery__
 *
 * To run a query within a React component, call `useGetUserTagsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetUserTagsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetUserTagsQuery({
 *   variables: {
 *      userId: // value for 'userId'
 *   },
 * });
 */
export function useGetUserTagsQuery(baseOptions?: Apollo.QueryHookOptions<GetUserTagsQuery, GetUserTagsQueryVariables>) {
        return Apollo.useQuery<GetUserTagsQuery, GetUserTagsQueryVariables>(GetUserTagsDocument, baseOptions);
      }
export function useGetUserTagsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserTagsQuery, GetUserTagsQueryVariables>) {
          return Apollo.useLazyQuery<GetUserTagsQuery, GetUserTagsQueryVariables>(GetUserTagsDocument, baseOptions);
        }
export type GetUserTagsQueryHookResult = ReturnType<typeof useGetUserTagsQuery>;
export type GetUserTagsLazyQueryHookResult = ReturnType<typeof useGetUserTagsLazyQuery>;
export type GetUserTagsQueryResult = Apollo.QueryResult<GetUserTagsQuery, GetUserTagsQueryVariables>;
export const CreatePersonTagDocument = gql`
    mutation CreatePersonTag($input: CreatePersonTagInput!) {
  createPersonTag(input: $input) {
    personTag {
      id
      tag {
        id
        user {
          id
        }
        name
        color
      }
      person {
        id
        firstName
        lastName
      }
    }
    errors {
      path
      message
    }
  }
}
    `;
export type CreatePersonTagMutationFn = Apollo.MutationFunction<CreatePersonTagMutation, CreatePersonTagMutationVariables>;

/**
 * __useCreatePersonTagMutation__
 *
 * To run a mutation, you first call `useCreatePersonTagMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreatePersonTagMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createPersonTagMutation, { data, loading, error }] = useCreatePersonTagMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreatePersonTagMutation(baseOptions?: Apollo.MutationHookOptions<CreatePersonTagMutation, CreatePersonTagMutationVariables>) {
        return Apollo.useMutation<CreatePersonTagMutation, CreatePersonTagMutationVariables>(CreatePersonTagDocument, baseOptions);
      }
export type CreatePersonTagMutationHookResult = ReturnType<typeof useCreatePersonTagMutation>;
export type CreatePersonTagMutationResult = Apollo.MutationResult<CreatePersonTagMutation>;
export type CreatePersonTagMutationOptions = Apollo.BaseMutationOptions<CreatePersonTagMutation, CreatePersonTagMutationVariables>;
export const DeletePersonTagDocument = gql`
    mutation DeletePersonTag($input: DeletePersonTagInput!) {
  deletePersonTag(input: $input)
}
    `;
export type DeletePersonTagMutationFn = Apollo.MutationFunction<DeletePersonTagMutation, DeletePersonTagMutationVariables>;

/**
 * __useDeletePersonTagMutation__
 *
 * To run a mutation, you first call `useDeletePersonTagMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeletePersonTagMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deletePersonTagMutation, { data, loading, error }] = useDeletePersonTagMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeletePersonTagMutation(baseOptions?: Apollo.MutationHookOptions<DeletePersonTagMutation, DeletePersonTagMutationVariables>) {
        return Apollo.useMutation<DeletePersonTagMutation, DeletePersonTagMutationVariables>(DeletePersonTagDocument, baseOptions);
      }
export type DeletePersonTagMutationHookResult = ReturnType<typeof useDeletePersonTagMutation>;
export type DeletePersonTagMutationResult = Apollo.MutationResult<DeletePersonTagMutation>;
export type DeletePersonTagMutationOptions = Apollo.BaseMutationOptions<DeletePersonTagMutation, DeletePersonTagMutationVariables>;